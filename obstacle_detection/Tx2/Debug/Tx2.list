
Tx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e78  08005e78  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e80  08005e80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000029c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e4fc  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ebd  00000000  00000000  0002e5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  00030498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ab5  00000000  00000000  00031250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022015  00000000  00000000  00031d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e764  00000000  00000000  00053d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cef7e  00000000  00000000  0006247e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000042bc  00000000  00000000  001313fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001356b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005df8 	.word	0x08005df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005df8 	.word	0x08005df8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10);
 8000d50:	1d39      	adds	r1, r7, #4
 8000d52:	230a      	movs	r3, #10
 8000d54:	2201      	movs	r2, #1
 8000d56:	4804      	ldr	r0, [pc, #16]	; (8000d68 <__io_putchar+0x20>)
 8000d58:	f003 fda1 	bl	800489e <HAL_UART_Transmit>
	return ch;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000013c 	.word	0x2000013c
 8000d6c:	00000000 	.word	0x00000000

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fdbc 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f8ae 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa66 	bl	800124c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d80:	f000 f914 	bl	8000fac <MX_CAN1_Init>
  MX_TIM13_Init();
 8000d84:	f000 f9ea 	bl	800115c <MX_TIM13_Init>
  MX_TIM8_Init();
 8000d88:	f000 f964 	bl	8001054 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000d8c:	f000 fa34 	bl	80011f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000d90:	4845      	ldr	r0, [pc, #276]	; (8000ea8 <main+0x138>)
 8000d92:	f001 f81f 	bl	8001dd4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d96:	2102      	movs	r1, #2
 8000d98:	4843      	ldr	r0, [pc, #268]	; (8000ea8 <main+0x138>)
 8000d9a:	f001 f93a 	bl	8002012 <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 8000d9e:	2064      	movs	r0, #100	; 0x64
 8000da0:	f000 fe18 	bl	80019d4 <HAL_Delay>
  HAL_Delay(100);
 8000da4:	2064      	movs	r0, #100	; 0x64
 8000da6:	f000 fe15 	bl	80019d4 <HAL_Delay>

  TxHeader.DLC=3;
 8000daa:	4b40      	ldr	r3, [pc, #256]	; (8000eac <main+0x13c>)
 8000dac:	2203      	movs	r2, #3
 8000dae:	611a      	str	r2, [r3, #16]
  TxHeader.RTR=CAN_RTR_DATA;
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <main+0x13c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  TxHeader.IDE=CAN_ID_STD;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <main+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId=0x0;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <main+0x13c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  TxHeader.StdId=0x0AA;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <main+0x13c>)
 8000dc4:	22aa      	movs	r2, #170	; 0xaa
 8000dc6:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime=DISABLE;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <main+0x13c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	751a      	strb	r2, [r3, #20]

  HAL_TIM_Base_Start(&htim13);
 8000dce:	4838      	ldr	r0, [pc, #224]	; (8000eb0 <main+0x140>)
 8000dd0:	f002 fb48 	bl	8003464 <HAL_TIM_Base_Start>
   HAL_TIM_Base_Start(&htim13);
 8000dd4:	4836      	ldr	r0, [pc, #216]	; (8000eb0 <main+0x140>)
 8000dd6:	f002 fb45 	bl	8003464 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <main+0x140>)
 8000dde:	f002 fc03 	bl	80035e8 <HAL_TIM_PWM_Start>
   HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8000de2:	2100      	movs	r1, #0
 8000de4:	4833      	ldr	r0, [pc, #204]	; (8000eb4 <main+0x144>)
 8000de6:	f002 fd21 	bl	800382c <HAL_TIM_IC_Start>
   HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000dea:	2104      	movs	r1, #4
 8000dec:	4831      	ldr	r0, [pc, #196]	; (8000eb4 <main+0x144>)
 8000dee:	f002 fd1d 	bl	800382c <HAL_TIM_IC_Start>
   TIM13->CCR1=3;
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <main+0x148>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
//	 	  		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
//	 	  			  Error_Handler();
//	 	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
	 	  		  while(1)
	 	  		  {
	 	  			 if(HAL_GetTick()-delay >= 1000){
 8000df8:	f000 fde0 	bl	80019bc <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <main+0x14c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e08:	d3f6      	bcc.n	8000df8 <main+0x88>
	 	  				 delay = HAL_GetTick();
 8000e0a:	f000 fdd7 	bl	80019bc <HAL_GetTick>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <main+0x14c>)
 8000e12:	6013      	str	r3, [r2, #0]
	 	  				 //echo1 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
	 	    	  		  echo2 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 8000e14:	2104      	movs	r1, #4
 8000e16:	4827      	ldr	r0, [pc, #156]	; (8000eb4 <main+0x144>)
 8000e18:	f002 ff84 	bl	8003d24 <HAL_TIM_ReadCapturedValue>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <main+0x150>)
 8000e20:	6013      	str	r3, [r2, #0]
	 	  				 //dis1 = echo1 / 58.0f;
	 	  	 	  		  //dist2 = echo2 / 58.0f;
	 	  		  		  dist2 = ((echo2 * 0.0340)/2);
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <main+0x150>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb64 	bl	80004f4 <__aeabi_ui2d>
 8000e2c:	a31c      	add	r3, pc, #112	; (adr r3, 8000ea0 <main+0x130>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fbd9 	bl	80005e8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e46:	f7ff fcf9 	bl	800083c <__aeabi_ddiv>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f7ff fddb 	bl	8000a0c <__aeabi_d2uiz>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <main+0x154>)
 8000e5a:	6013      	str	r3, [r2, #0]
	 	  				  printf("echo2 : %u , Dis2 : %d\r\n",echo2,dist2);
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <main+0x150>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <main+0x154>)
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <main+0x158>)
 8000e68:	f004 f950 	bl	800510c <iprintf>

	 	  				  if(dist2 < 5)
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <main+0x154>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d8c1      	bhi.n	8000df8 <main+0x88>
	 	  				  {
	 	  					  TxData[0] = '5';	//yellow
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <main+0x15c>)
 8000e76:	2235      	movs	r2, #53	; 0x35
 8000e78:	701a      	strb	r2, [r3, #0]
	 	  					  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <main+0x160>)
 8000e7c:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <main+0x15c>)
 8000e7e:	490b      	ldr	r1, [pc, #44]	; (8000eac <main+0x13c>)
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <main+0x138>)
 8000e82:	f000 ffeb 	bl	8001e5c <HAL_CAN_AddTxMessage>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <main+0x120>
	 	  						  Error_Handler();
 8000e8c:	f000 faa2 	bl	80013d4 <Error_Handler>
	 	  					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <main+0x164>)
 8000e98:	f001 fdbe 	bl	8002a18 <HAL_GPIO_WritePin>
	 	  			 if(HAL_GetTick()-delay >= 1000){
 8000e9c:	e7ac      	b.n	8000df8 <main+0x88>
 8000e9e:	bf00      	nop
 8000ea0:	b020c49c 	.word	0xb020c49c
 8000ea4:	3fa16872 	.word	0x3fa16872
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	2000018c 	.word	0x2000018c
 8000eb0:	200000f4 	.word	0x200000f4
 8000eb4:	200000ac 	.word	0x200000ac
 8000eb8:	40001c00 	.word	0x40001c00
 8000ebc:	20000184 	.word	0x20000184
 8000ec0:	20000180 	.word	0x20000180
 8000ec4:	20000188 	.word	0x20000188
 8000ec8:	08005e10 	.word	0x08005e10
 8000ecc:	200001a4 	.word	0x200001a4
 8000ed0:	200001ac 	.word	0x200001ac
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	; 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 f965 	bl	80051b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000f4c:	2332      	movs	r3, #50	; 0x32
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fd99 	bl	8002a94 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f68:	f000 fa34 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fffa 	bl	8002f84 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f96:	f000 fa1d 	bl	80013d4 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3750      	adds	r7, #80	; 0x50
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000

08000fac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fb2:	4b26      	ldr	r3, [pc, #152]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fb4:	4a26      	ldr	r2, [pc, #152]	; (8001050 <MX_CAN1_Init+0xa4>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72-1;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fba:	2247      	movs	r2, #71	; 0x47
 8000fbc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_CAN1_Init+0xa0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_CAN1_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_CAN1_Init+0xa0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <MX_CAN1_Init+0xa0>)
 8000ffe:	f000 fd0d 	bl	8001a1c <HAL_CAN_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001008:	f000 f9e4 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
   canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
   canFilterConfig.SlaveStartFilterBank=14;
 8001010:	230e      	movs	r3, #14
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
   canFilterConfig.FilterBank=2;
 8001014:	2302      	movs	r3, #2
 8001016:	617b      	str	r3, [r7, #20]
   canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
   canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
   canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
   canFilterConfig.FilterMaskIdLow=0x0000;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
   canFilterConfig.FilterMaskIdHigh=0xFF00;
 8001028:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800102c:	60bb      	str	r3, [r7, #8]
   canFilterConfig.FilterIdLow=0x0000;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
   canFilterConfig.FilterIdHigh=0x1500;
 8001032:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001036:	603b      	str	r3, [r7, #0]
   HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_CAN1_Init+0xa0>)
 800103e:	f000 fde9 	bl	8001c14 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000084 	.word	0x20000084
 8001050:	40006400 	.word	0x40006400

08001054 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <MX_TIM8_Init+0x100>)
 8001082:	4a35      	ldr	r2, [pc, #212]	; (8001158 <MX_TIM8_Init+0x104>)
 8001084:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_TIM8_Init+0x100>)
 8001088:	224f      	movs	r2, #79	; 0x4f
 800108a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_TIM8_Init+0x100>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <MX_TIM8_Init+0x100>)
 8001094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001098:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <MX_TIM8_Init+0x100>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <MX_TIM8_Init+0x100>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <MX_TIM8_Init+0x100>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010ac:	4829      	ldr	r0, [pc, #164]	; (8001154 <MX_TIM8_Init+0x100>)
 80010ae:	f002 f989 	bl	80033c4 <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80010b8:	f000 f98c 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80010bc:	4825      	ldr	r0, [pc, #148]	; (8001154 <MX_TIM8_Init+0x100>)
 80010be:	f002 fb5b 	bl	8003778 <HAL_TIM_IC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80010c8:	f000 f984 	bl	80013d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010cc:	2304      	movs	r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80010d0:	2360      	movs	r3, #96	; 0x60
 80010d2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010d4:	230a      	movs	r3, #10
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	; (8001154 <MX_TIM8_Init+0x100>)
 80010e4:	f002 fddc 	bl	8003ca0 <HAL_TIM_SlaveConfigSynchro>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80010ee:	f000 f971 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_TIM8_Init+0x100>)
 8001102:	f003 fb03 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 800110c:	f000 f962 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001110:	230a      	movs	r3, #10
 8001112:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001114:	2301      	movs	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_TIM8_Init+0x100>)
 8001128:	f002 fc5c 	bl	80039e4 <HAL_TIM_IC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8001132:	f000 f94f 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2204      	movs	r2, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_TIM8_Init+0x100>)
 800113e:	f002 fc51 	bl	80039e4 <HAL_TIM_IC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001148:	f000 f944 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000ac 	.word	0x200000ac
 8001158:	40010400 	.word	0x40010400

0800115c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_TIM13_Init+0x94>)
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <MX_TIM13_Init+0x98>)
 8001178:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 199;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_TIM13_Init+0x94>)
 800117c:	22c7      	movs	r2, #199	; 0xc7
 800117e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM13_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 39999;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_TIM13_Init+0x94>)
 8001188:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800118c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM13_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_TIM13_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <MX_TIM13_Init+0x94>)
 800119c:	f002 f912 	bl	80033c4 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80011a6:	f000 f915 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <MX_TIM13_Init+0x94>)
 80011ac:	f002 f9c2 	bl	8003534 <HAL_TIM_PWM_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80011b6:	f000 f90d 	bl	80013d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ba:	2360      	movs	r3, #96	; 0x60
 80011bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM13_Init+0x94>)
 80011d2:	f002 fca3 	bl	8003b1c <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80011dc:	f000 f8fa 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM13_Init+0x94>)
 80011e2:	f000 f9d3 	bl	800158c <HAL_TIM_MspPostInit>

}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000f4 	.word	0x200000f4
 80011f4:	40001c00 	.word	0x40001c00

080011f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART3_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART3_UART_Init+0x4c>)
 8001230:	f003 fae8 	bl	8004804 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 f8cb 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000013c 	.word	0x2000013c
 8001248:	40004800 	.word	0x40004800

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <MX_GPIO_Init+0x158>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <MX_GPIO_Init+0x158>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <MX_GPIO_Init+0x158>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <MX_GPIO_Init+0x158>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a47      	ldr	r2, [pc, #284]	; (80013a4 <MX_GPIO_Init+0x158>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <MX_GPIO_Init+0x158>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a39      	ldr	r2, [pc, #228]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <MX_GPIO_Init+0x158>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012f4:	482c      	ldr	r0, [pc, #176]	; (80013a8 <MX_GPIO_Init+0x15c>)
 80012f6:	f001 fb8f 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001300:	482a      	ldr	r0, [pc, #168]	; (80013ac <MX_GPIO_Init+0x160>)
 8001302:	f001 fb89 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8001306:	2317      	movs	r3, #23
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4825      	ldr	r0, [pc, #148]	; (80013b0 <MX_GPIO_Init+0x164>)
 800131c:	f001 f9e0 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001320:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	481b      	ldr	r0, [pc, #108]	; (80013a8 <MX_GPIO_Init+0x15c>)
 800133a:	f001 f9d1 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <MX_GPIO_Init+0x160>)
 8001358:	f001 f9c2 	bl	80026e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2006      	movs	r0, #6
 8001362:	f001 f986 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001366:	2006      	movs	r0, #6
 8001368:	f001 f99f 	bl	80026aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2007      	movs	r0, #7
 8001372:	f001 f97e 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001376:	2007      	movs	r0, #7
 8001378:	f001 f997 	bl	80026aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2008      	movs	r0, #8
 8001382:	f001 f976 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001386:	2008      	movs	r0, #8
 8001388:	f001 f98f 	bl	80026aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	200a      	movs	r0, #10
 8001392:	f001 f96e 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001396:	200a      	movs	r0, #10
 8001398:	f001 f987 	bl	80026aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80013c4:	f001 fb28 	bl	8002a18 <HAL_GPIO_WritePin>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020c00 	.word	0x40020c00

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_MspInit+0x4c>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_MspInit+0x4c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800141e:	2007      	movs	r0, #7
 8001420:	f001 f91c 	bl	800265c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_CAN_MspInit+0x94>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d134      	bne.n	80014bc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_CAN_MspInit+0x98>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_CAN_MspInit+0x98>)
 800145c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_CAN_MspInit+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_CAN_MspInit+0x98>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_CAN_MspInit+0x98>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_CAN_MspInit+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800149c:	2309      	movs	r3, #9
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4809      	ldr	r0, [pc, #36]	; (80014cc <HAL_CAN_MspInit+0x9c>)
 80014a8:	f001 f91a 	bl	80026e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2014      	movs	r0, #20
 80014b2:	f001 f8de 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014b6:	2014      	movs	r0, #20
 80014b8:	f001 f8f7 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40006400 	.word	0x40006400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a23      	ldr	r2, [pc, #140]	; (800157c <HAL_TIM_Base_MspInit+0xac>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12c      	bne.n	800154c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800153a:	2303      	movs	r3, #3
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <HAL_TIM_Base_MspInit+0xb4>)
 8001546:	f001 f8cb 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800154a:	e012      	b.n	8001572 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM13)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_TIM_Base_MspInit+0xb8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10d      	bne.n	8001572 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_TIM_Base_MspInit+0xb0>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40010400 	.word	0x40010400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020800 	.word	0x40020800
 8001588:	40001c00 	.word	0x40001c00

0800158c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HAL_TIM_MspPostInit+0x68>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d11d      	bne.n	80015ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_TIM_MspPostInit+0x6c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_TIM_MspPostInit+0x6c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_TIM_MspPostInit+0x6c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ca:	2340      	movs	r3, #64	; 0x40
 80015cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80015da:	2309      	movs	r3, #9
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_TIM_MspPostInit+0x70>)
 80015e6:	f001 f87b 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40001c00 	.word	0x40001c00
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_UART_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12c      	bne.n	800167c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x88>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800165a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800166c:	2307      	movs	r3, #7
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0x8c>)
 8001678:	f001 f832 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40004800 	.word	0x40004800
 8001688:	40023800 	.word	0x40023800
 800168c:	40020400 	.word	0x40020400

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f000 f95a 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f001 f9af 	bl	8002a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80016f6:	2002      	movs	r0, #2
 80016f8:	f001 f9a8 	bl	8002a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001704:	2004      	movs	r0, #4
 8001706:	f001 f9a1 	bl	8002a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}

0800170e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001712:	2010      	movs	r0, #16
 8001714:	f001 f99a 	bl	8002a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <CAN1_RX0_IRQHandler+0x10>)
 8001722:	f000 fc9c 	bl	800205e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000084 	.word	0x20000084

08001730 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
  }

  return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fadf 	bl	8000d48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
  }
  return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
  return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_isatty>:

int _isatty(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f003 fd0a 	bl	8005254 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20020000 	.word	0x20020000
 800186c:	00000400 	.word	0x00000400
 8001870:	200001b0 	.word	0x200001b0
 8001874:	20000308 	.word	0x20000308

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b8:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c6:	f7ff ffd7 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f003 fcc9 	bl	8005260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fa4f 	bl	8000d70 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018e0:	08005e88 	.word	0x08005e88
  ldr r2, =_sbss
 80018e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018e8:	20000304 	.word	0x20000304

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 fe9f 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fd5c 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 feb7 	bl	80026c6 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001970:	f000 fe7f 	bl	8002672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	200001b4 	.word	0x200001b4

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200001b4 	.word	0x200001b4

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008

08001a1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0ed      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fcf8 	bl	8001430 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff ffb4 	bl	80019bc <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a56:	e012      	b.n	8001a7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a58:	f7ff ffb0 	bl	80019bc <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b0a      	cmp	r3, #10
 8001a64:	d90b      	bls.n	8001a7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2205      	movs	r2, #5
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0c5      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0e5      	beq.n	8001a58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0202 	bic.w	r2, r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9c:	f7ff ff8e 	bl	80019bc <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa2:	e012      	b.n	8001aca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa4:	f7ff ff8a 	bl	80019bc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b0a      	cmp	r3, #10
 8001ab0:	d90b      	bls.n	8001aca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e09f      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e5      	bne.n	8001aa4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7e5b      	ldrb	r3, [r3, #25]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e9b      	ldrb	r3, [r3, #26]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0220 	bic.w	r2, r2, #32
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7edb      	ldrb	r3, [r3, #27]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0210 	orr.w	r2, r2, #16
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7f1b      	ldrb	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0208 	orr.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e007      	b.n	8001baa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0208 	bic.w	r2, r2, #8
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7f5b      	ldrb	r3, [r3, #29]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0204 	orr.w	r2, r2, #4
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e007      	b.n	8001bd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	ea42 0103 	orr.w	r1, r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	1e5a      	subs	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c2c:	7cfb      	ldrb	r3, [r7, #19]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d003      	beq.n	8001c3a <HAL_CAN_ConfigFilter+0x26>
 8001c32:	7cfb      	ldrb	r3, [r7, #19]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 80be 	bne.w	8001db6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c3a:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d123      	bne.n	8001ce4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3248      	adds	r2, #72	; 0x48
 8001cc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cda:	6979      	ldr	r1, [r7, #20]
 8001cdc:	3348      	adds	r3, #72	; 0x48
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d122      	bne.n	8001d32 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3248      	adds	r2, #72	; 0x48
 8001d12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	3348      	adds	r3, #72	; 0x48
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	401a      	ands	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d4c:	e007      	b.n	8001d5e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	401a      	ands	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d78:	e007      	b.n	8001d8a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001da8:	f023 0201 	bic.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e006      	b.n	8001dc4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40006400 	.word	0x40006400

08001dd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d12e      	bne.n	8001e46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff fddc 	bl	80019bc <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e06:	e012      	b.n	8001e2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e08:	f7ff fdd8 	bl	80019bc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b0a      	cmp	r3, #10
 8001e14:	d90b      	bls.n	8001e2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2205      	movs	r2, #5
 8001e26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e012      	b.n	8001e54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e5      	bne.n	8001e08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e006      	b.n	8001e54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
  }
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_AddTxMessage+0x2c>
 8001e80:	7ffb      	ldrb	r3, [r7, #31]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	f040 80b8 	bne.w	8001ff8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a0 	beq.w	8001fe8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	0e1b      	lsrs	r3, r3, #24
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d907      	bls.n	8001ec8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e09e      	b.n	8002006 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3318      	adds	r3, #24
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	440b      	add	r3, r1
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e00f      	b.n	8001f16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	3318      	adds	r3, #24
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	440b      	add	r3, r1
 8001f14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3318      	adds	r3, #24
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	440b      	add	r3, r1
 8001f26:	3304      	adds	r3, #4
 8001f28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	7d1b      	ldrb	r3, [r3, #20]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d111      	bne.n	8001f56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3318      	adds	r3, #24
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3304      	adds	r3, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6811      	ldr	r1, [r2, #0]
 8001f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	440b      	add	r3, r1
 8001f52:	3304      	adds	r3, #4
 8001f54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3307      	adds	r3, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	061a      	lsls	r2, r3, #24
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3306      	adds	r3, #6
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3305      	adds	r3, #5
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	4313      	orrs	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	3204      	adds	r2, #4
 8001f76:	7812      	ldrb	r2, [r2, #0]
 8001f78:	4610      	mov	r0, r2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6811      	ldr	r1, [r2, #0]
 8001f7e:	ea43 0200 	orr.w	r2, r3, r0
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3303      	adds	r3, #3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061a      	lsls	r2, r3, #24
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	4610      	mov	r0, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	6811      	ldr	r1, [r2, #0]
 8001fb4:	ea43 0200 	orr.w	r2, r3, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001fc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3318      	adds	r3, #24
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6811      	ldr	r1, [r2, #0]
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3318      	adds	r3, #24
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e00e      	b.n	8002006 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e006      	b.n	8002006 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002022:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d002      	beq.n	8002030 <HAL_CAN_ActivateNotification+0x1e>
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d109      	bne.n	8002044 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6959      	ldr	r1, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e006      	b.n	8002052 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b08a      	sub	sp, #40	; 0x28
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d07c      	beq.n	800219e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d023      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff f977 	bl	80013b4 <HAL_CAN_TxMailbox0CompleteCallback>
 80020c6:	e016      	b.n	80020f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e00c      	b.n	80020f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	e002      	b.n	80020f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f97f 	bl	80023f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d024      	beq.n	800214a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f959 	bl	80023cc <HAL_CAN_TxMailbox1CompleteCallback>
 800211a:	e016      	b.n	800214a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e00c      	b.n	800214a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	e002      	b.n	800214a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f95f 	bl	8002408 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d024      	beq.n	800219e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800215c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f939 	bl	80023e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800216e:	e016      	b.n	800219e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e00c      	b.n	800219e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e002      	b.n	800219e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f93f 	bl	800241c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00c      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2210      	movs	r2, #16
 80021c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00b      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2208      	movs	r2, #8
 80021dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f930 	bl	8002444 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f917 	bl	8002430 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00c      	beq.n	8002226 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2210      	movs	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2208      	movs	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f912 	bl	800246c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8f9 	bl	8002458 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2210      	movs	r2, #16
 8002280:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8fc 	bl	8002480 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2208      	movs	r2, #8
 80022a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8f5 	bl	8002494 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d07b      	beq.n	80023ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d072      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002318:	2b00      	cmp	r3, #0
 800231a:	d043      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03e      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d02b      	beq.n	8002388 <HAL_CAN_IRQHandler+0x32a>
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d82e      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 8002334:	2b50      	cmp	r3, #80	; 0x50
 8002336:	d022      	beq.n	800237e <HAL_CAN_IRQHandler+0x320>
 8002338:	2b50      	cmp	r3, #80	; 0x50
 800233a:	d82a      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d019      	beq.n	8002374 <HAL_CAN_IRQHandler+0x316>
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d826      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d010      	beq.n	800236a <HAL_CAN_IRQHandler+0x30c>
 8002348:	2b30      	cmp	r3, #48	; 0x30
 800234a:	d822      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 800234c:	2b10      	cmp	r3, #16
 800234e:	d002      	beq.n	8002356 <HAL_CAN_IRQHandler+0x2f8>
 8002350:	2b20      	cmp	r3, #32
 8002352:	d005      	beq.n	8002360 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002354:	e01d      	b.n	8002392 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800235e:	e019      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	f043 0310 	orr.w	r3, r3, #16
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002368:	e014      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	f043 0320 	orr.w	r3, r3, #32
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002372:	e00f      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800237c:	e00a      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002386:	e005      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002390:	e000      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            break;
 8002392:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2204      	movs	r2, #4
 80023aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f872 	bl	80024a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800263c:	f7ff ff8e 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff29 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff3e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff8e 	bl	80025b0 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff31 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e16b      	b.n	80029d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 815a 	bne.w	80029ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d005      	beq.n	8002732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	2b02      	cmp	r3, #2
 8002730:	d130      	bne.n	8002794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 0201 	and.w	r2, r3, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b03      	cmp	r3, #3
 800279e:	d017      	beq.n	80027d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d123      	bne.n	8002824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	08da      	lsrs	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3208      	adds	r2, #8
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0203 	and.w	r2, r3, #3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80b4 	beq.w	80029ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b60      	ldr	r3, [pc, #384]	; (80029ec <HAL_GPIO_Init+0x30c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_GPIO_Init+0x30c>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_GPIO_Init+0x30c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002882:	4a5b      	ldr	r2, [pc, #364]	; (80029f0 <HAL_GPIO_Init+0x310>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_GPIO_Init+0x314>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d02b      	beq.n	8002906 <HAL_GPIO_Init+0x226>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a51      	ldr	r2, [pc, #324]	; (80029f8 <HAL_GPIO_Init+0x318>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d025      	beq.n	8002902 <HAL_GPIO_Init+0x222>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a50      	ldr	r2, [pc, #320]	; (80029fc <HAL_GPIO_Init+0x31c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_Init+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x320>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x21a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4e      	ldr	r2, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x324>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x216>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x328>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x212>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x32c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_GPIO_Init+0x330>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x20a>
 80028e6:	2307      	movs	r3, #7
 80028e8:	e00e      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028ea:	2308      	movs	r3, #8
 80028ec:	e00c      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028ee:	2306      	movs	r3, #6
 80028f0:	e00a      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x228>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x228>
 8002906:	2300      	movs	r3, #0
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x310>)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_GPIO_Init+0x334>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <HAL_GPIO_Init+0x334>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_GPIO_Init+0x334>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_GPIO_Init+0x334>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_GPIO_Init+0x334>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_GPIO_Init+0x334>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_GPIO_Init+0x334>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_GPIO_Init+0x334>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	f67f ae90 	bls.w	80026fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40021c00 	.word	0x40021c00
 8002a14:	40013c00 	.word	0x40013c00

08002a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
 8002a24:	4613      	mov	r3, r2
 8002a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a28:	787b      	ldrb	r3, [r7, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a34:	e003      	b.n	8002a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	041a      	lsls	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	619a      	str	r2, [r3, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d006      	beq.n	8002a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f806 	bl	8002a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e267      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d075      	beq.n	8002b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab2:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d112      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4b82      	ldr	r3, [pc, #520]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4b7e      	ldr	r3, [pc, #504]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d05b      	beq.n	8002b9c <HAL_RCC_OscConfig+0x108>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d157      	bne.n	8002b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e242      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_OscConfig+0x74>
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x98>
 8002b12:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6f      	ldr	r2, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6c      	ldr	r2, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a68      	ldr	r2, [pc, #416]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a65      	ldr	r2, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe ff36 	bl	80019bc <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe ff32 	bl	80019bc <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e207      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xc0>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe ff22 	bl	80019bc <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fe ff1e 	bl	80019bc <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1f3      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b51      	ldr	r3, [pc, #324]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0xe8>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002baa:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b44      	ldr	r3, [pc, #272]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c7      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4937      	ldr	r1, [pc, #220]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fed7 	bl	80019bc <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fed3 	bl	80019bc <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a8      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4925      	ldr	r1, [pc, #148]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe feb6 	bl	80019bc <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c54:	f7fe feb2 	bl	80019bc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e187      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d036      	beq.n	8002cec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fe96 	bl	80019bc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe fe92 	bl	80019bc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e167      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x200>
 8002cb2:	e01b      	b.n	8002cec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fe7f 	bl	80019bc <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	e00e      	b.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fe7b 	bl	80019bc <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d907      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e150      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ea      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8097 	beq.w	8002e28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	4b7d      	ldr	r3, [pc, #500]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a7c      	ldr	r2, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b74      	ldr	r3, [pc, #464]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a73      	ldr	r2, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fe fe3b 	bl	80019bc <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe fe37 	bl	80019bc <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e10c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2ea>
 8002d70:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a63      	ldr	r2, [pc, #396]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x30c>
 8002d86:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a5e      	ldr	r2, [pc, #376]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002da0:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a57      	ldr	r2, [pc, #348]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a54      	ldr	r2, [pc, #336]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fdfc 	bl	80019bc <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fdf8 	bl	80019bc <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0cb      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ee      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x334>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe fde6 	bl	80019bc <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe fde2 	bl	80019bc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0b5      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a1 	beq.w	8002f74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d05c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d141      	bne.n	8002eca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fdb6 	bl	80019bc <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fdb2 	bl	80019bc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e087      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	491b      	ldr	r1, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fd8b 	bl	80019bc <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fd87 	bl	80019bc <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e05c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x416>
 8002ec8:	e054      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fd74 	bl	80019bc <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fd70 	bl	80019bc <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e045      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x444>
 8002ef6:	e03d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e038      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x4ec>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d121      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0cc      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d90c      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d044      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d119      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d003      	beq.n	8003042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	2b03      	cmp	r3, #3
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e067      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4934      	ldr	r1, [pc, #208]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7fe fca2 	bl	80019bc <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7fe fc9e 	bl	80019bc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e04f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d20c      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f821 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fc02 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	08005e2c 	.word	0x08005e2c
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003154:	b094      	sub	sp, #80	; 0x50
 8003156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	647b      	str	r3, [r7, #68]	; 0x44
 800315c:	2300      	movs	r3, #0
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003160:	2300      	movs	r3, #0
 8003162:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003168:	4b79      	ldr	r3, [pc, #484]	; (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d00d      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x40>
 8003174:	2b08      	cmp	r3, #8
 8003176:	f200 80e1 	bhi.w	800333c <HAL_RCC_GetSysClockFreq+0x1ec>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x34>
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x3a>
 8003182:	e0db      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_GetSysClockFreq+0x204>)
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003188:	e0db      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_GetSysClockFreq+0x208>)
 800318c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800318e:	e0d8      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319a:	4b6d      	ldr	r3, [pc, #436]	; (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d063      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ba:	2300      	movs	r3, #0
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
 80031be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031c2:	4622      	mov	r2, r4
 80031c4:	462b      	mov	r3, r5
 80031c6:	f04f 0000 	mov.w	r0, #0
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	0159      	lsls	r1, r3, #5
 80031d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d4:	0150      	lsls	r0, r2, #5
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4621      	mov	r1, r4
 80031dc:	1a51      	subs	r1, r2, r1
 80031de:	6139      	str	r1, [r7, #16]
 80031e0:	4629      	mov	r1, r5
 80031e2:	eb63 0301 	sbc.w	r3, r3, r1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f4:	4659      	mov	r1, fp
 80031f6:	018b      	lsls	r3, r1, #6
 80031f8:	4651      	mov	r1, sl
 80031fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031fe:	4651      	mov	r1, sl
 8003200:	018a      	lsls	r2, r1, #6
 8003202:	4651      	mov	r1, sl
 8003204:	ebb2 0801 	subs.w	r8, r2, r1
 8003208:	4659      	mov	r1, fp
 800320a:	eb63 0901 	sbc.w	r9, r3, r1
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800321e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003222:	4690      	mov	r8, r2
 8003224:	4699      	mov	r9, r3
 8003226:	4623      	mov	r3, r4
 8003228:	eb18 0303 	adds.w	r3, r8, r3
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	462b      	mov	r3, r5
 8003230:	eb49 0303 	adc.w	r3, r9, r3
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003242:	4629      	mov	r1, r5
 8003244:	024b      	lsls	r3, r1, #9
 8003246:	4621      	mov	r1, r4
 8003248:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800324c:	4621      	mov	r1, r4
 800324e:	024a      	lsls	r2, r1, #9
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003256:	2200      	movs	r2, #0
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
 800325a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800325c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003260:	f7fd fbf4 	bl	8000a4c <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4613      	mov	r3, r2
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800326c:	e058      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	2200      	movs	r2, #0
 8003276:	4618      	mov	r0, r3
 8003278:	4611      	mov	r1, r2
 800327a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003288:	4642      	mov	r2, r8
 800328a:	464b      	mov	r3, r9
 800328c:	f04f 0000 	mov.w	r0, #0
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	0159      	lsls	r1, r3, #5
 8003296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329a:	0150      	lsls	r0, r2, #5
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4641      	mov	r1, r8
 80032a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032a6:	4649      	mov	r1, r9
 80032a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032c0:	ebb2 040a 	subs.w	r4, r2, sl
 80032c4:	eb63 050b 	sbc.w	r5, r3, fp
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	00eb      	lsls	r3, r5, #3
 80032d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d6:	00e2      	lsls	r2, r4, #3
 80032d8:	4614      	mov	r4, r2
 80032da:	461d      	mov	r5, r3
 80032dc:	4643      	mov	r3, r8
 80032de:	18e3      	adds	r3, r4, r3
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	464b      	mov	r3, r9
 80032e4:	eb45 0303 	adc.w	r3, r5, r3
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f6:	4629      	mov	r1, r5
 80032f8:	028b      	lsls	r3, r1, #10
 80032fa:	4621      	mov	r1, r4
 80032fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003300:	4621      	mov	r1, r4
 8003302:	028a      	lsls	r2, r1, #10
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330a:	2200      	movs	r2, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	61fa      	str	r2, [r7, #28]
 8003310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003314:	f7fd fb9a 	bl	8000a4c <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003330:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800333a:	e002      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetSysClockFreq+0x204>)
 800333e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003344:	4618      	mov	r0, r3
 8003346:	3750      	adds	r7, #80	; 0x50
 8003348:	46bd      	mov	sp, r7
 800334a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	00f42400 	.word	0x00f42400
 8003358:	007a1200 	.word	0x007a1200

0800335c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_RCC_GetHCLKFreq+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000000 	.word	0x20000000

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003378:	f7ff fff0 	bl	800335c <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	08005e3c 	.word	0x08005e3c

0800339c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033a0:	f7ff ffdc 	bl	800335c <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0b5b      	lsrs	r3, r3, #13
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4903      	ldr	r1, [pc, #12]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08005e3c 	.word	0x08005e3c

080033c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e041      	b.n	800345a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe f870 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 fcd2 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e046      	b.n	800350a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a23      	ldr	r2, [pc, #140]	; (8003518 <HAL_TIM_Base_Start+0xb4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_TIM_Base_Start+0x70>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d01d      	beq.n	80034d4 <HAL_TIM_Base_Start+0x70>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_TIM_Base_Start+0xb8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_TIM_Base_Start+0x70>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_TIM_Base_Start+0xbc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_TIM_Base_Start+0x70>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <HAL_TIM_Base_Start+0xc0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_TIM_Base_Start+0x70>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_TIM_Base_Start+0xc4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_TIM_Base_Start+0x70>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_TIM_Base_Start+0xc8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_Base_Start+0x70>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_TIM_Base_Start+0xcc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d111      	bne.n	80034f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d010      	beq.n	8003508 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	e007      	b.n	8003508 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40010000 	.word	0x40010000
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40000c00 	.word	0x40000c00
 8003528:	40010400 	.word	0x40010400
 800352c:	40014000 	.word	0x40014000
 8003530:	40001800 	.word	0x40001800

08003534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f839 	bl	80035d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fc1a 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PWM_Start+0x24>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e022      	b.n	8003652 <HAL_TIM_PWM_Start+0x6a>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b04      	cmp	r3, #4
 8003610:	d109      	bne.n	8003626 <HAL_TIM_PWM_Start+0x3e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e015      	b.n	8003652 <HAL_TIM_PWM_Start+0x6a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d109      	bne.n	8003640 <HAL_TIM_PWM_Start+0x58>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e008      	b.n	8003652 <HAL_TIM_PWM_Start+0x6a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e07c      	b.n	8003754 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_TIM_PWM_Start+0x82>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	e013      	b.n	8003692 <HAL_TIM_PWM_Start+0xaa>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d104      	bne.n	800367a <HAL_TIM_PWM_Start+0x92>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	e00b      	b.n	8003692 <HAL_TIM_PWM_Start+0xaa>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Start+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003688:	e003      	b.n	8003692 <HAL_TIM_PWM_Start+0xaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2201      	movs	r2, #1
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f811 	bl	80046c2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2d      	ldr	r2, [pc, #180]	; (800375c <HAL_TIM_PWM_Start+0x174>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_PWM_Start+0xcc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_TIM_PWM_Start+0x178>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_TIM_PWM_Start+0xd0>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_TIM_PWM_Start+0xd2>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a22      	ldr	r2, [pc, #136]	; (800375c <HAL_TIM_PWM_Start+0x174>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_TIM_PWM_Start+0x136>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d01d      	beq.n	800371e <HAL_TIM_PWM_Start+0x136>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_TIM_PWM_Start+0x17c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_TIM_PWM_Start+0x136>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_TIM_PWM_Start+0x180>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_TIM_PWM_Start+0x136>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_TIM_PWM_Start+0x184>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIM_PWM_Start+0x136>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_TIM_PWM_Start+0x178>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_TIM_PWM_Start+0x136>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_TIM_PWM_Start+0x188>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIM_PWM_Start+0x136>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a16      	ldr	r2, [pc, #88]	; (8003774 <HAL_TIM_PWM_Start+0x18c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d111      	bne.n	8003742 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b06      	cmp	r3, #6
 800372e:	d010      	beq.n	8003752 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003740:	e007      	b.n	8003752 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40010000 	.word	0x40010000
 8003760:	40010400 	.word	0x40010400
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40014000 	.word	0x40014000
 8003774:	40001800 	.word	0x40001800

08003778 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f839 	bl	8003816 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 faf8 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <HAL_TIM_IC_Start+0x1a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e013      	b.n	800386e <HAL_TIM_IC_Start+0x42>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d104      	bne.n	8003856 <HAL_TIM_IC_Start+0x2a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e00b      	b.n	800386e <HAL_TIM_IC_Start+0x42>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d104      	bne.n	8003866 <HAL_TIM_IC_Start+0x3a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e003      	b.n	800386e <HAL_TIM_IC_Start+0x42>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386c:	b2db      	uxtb	r3, r3
 800386e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_TIM_IC_Start+0x54>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e013      	b.n	80038a8 <HAL_TIM_IC_Start+0x7c>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d104      	bne.n	8003890 <HAL_TIM_IC_Start+0x64>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e00b      	b.n	80038a8 <HAL_TIM_IC_Start+0x7c>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d104      	bne.n	80038a0 <HAL_TIM_IC_Start+0x74>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e003      	b.n	80038a8 <HAL_TIM_IC_Start+0x7c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d102      	bne.n	80038b6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e081      	b.n	80039be <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_TIM_IC_Start+0x9e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_IC_Start+0xc6>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d104      	bne.n	80038da <HAL_TIM_IC_Start+0xae>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d8:	e00b      	b.n	80038f2 <HAL_TIM_IC_Start+0xc6>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d104      	bne.n	80038ea <HAL_TIM_IC_Start+0xbe>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e8:	e003      	b.n	80038f2 <HAL_TIM_IC_Start+0xc6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_IC_Start+0xd6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003900:	e013      	b.n	800392a <HAL_TIM_IC_Start+0xfe>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d104      	bne.n	8003912 <HAL_TIM_IC_Start+0xe6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003910:	e00b      	b.n	800392a <HAL_TIM_IC_Start+0xfe>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d104      	bne.n	8003922 <HAL_TIM_IC_Start+0xf6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003920:	e003      	b.n	800392a <HAL_TIM_IC_Start+0xfe>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	6839      	ldr	r1, [r7, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fec5 	bl	80046c2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <HAL_TIM_IC_Start+0x19c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_TIM_IC_Start+0x15c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d01d      	beq.n	8003988 <HAL_TIM_IC_Start+0x15c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <HAL_TIM_IC_Start+0x1a0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_TIM_IC_Start+0x15c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <HAL_TIM_IC_Start+0x1a4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_TIM_IC_Start+0x15c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <HAL_TIM_IC_Start+0x1a8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_TIM_IC_Start+0x15c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <HAL_TIM_IC_Start+0x1ac>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_TIM_IC_Start+0x15c>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a18      	ldr	r2, [pc, #96]	; (80039dc <HAL_TIM_IC_Start+0x1b0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_TIM_IC_Start+0x15c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <HAL_TIM_IC_Start+0x1b4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d111      	bne.n	80039ac <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d010      	beq.n	80039bc <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	e007      	b.n	80039bc <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40001800 	.word	0x40001800

080039e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_IC_ConfigChannel+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e088      	b.n	8003b14 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11b      	bne.n	8003a48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f000 fca6 	bl	8004370 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020c 	bic.w	r2, r2, #12
 8003a32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6999      	ldr	r1, [r3, #24]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	619a      	str	r2, [r3, #24]
 8003a46:	e060      	b.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d11c      	bne.n	8003a88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f000 fd2a 	bl	80044b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6999      	ldr	r1, [r3, #24]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	e040      	b.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11b      	bne.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f000 fd77 	bl	8004590 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 020c 	bic.w	r2, r2, #12
 8003ab0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69d9      	ldr	r1, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	61da      	str	r2, [r3, #28]
 8003ac4:	e021      	b.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d11c      	bne.n	8003b06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f000 fd94 	bl	8004608 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003aee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69d9      	ldr	r1, [r3, #28]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	021a      	lsls	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
 8003b04:	e001      	b.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e0ae      	b.n	8003c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	f200 809f 	bhi.w	8003c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003c89 	.word	0x08003c89
 8003b58:	08003c89 	.word	0x08003c89
 8003b5c:	08003c89 	.word	0x08003c89
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003c89 	.word	0x08003c89
 8003b68:	08003c89 	.word	0x08003c89
 8003b6c:	08003c89 	.word	0x08003c89
 8003b70:	08003c07 	.word	0x08003c07
 8003b74:	08003c89 	.word	0x08003c89
 8003b78:	08003c89 	.word	0x08003c89
 8003b7c:	08003c89 	.word	0x08003c89
 8003b80:	08003c47 	.word	0x08003c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f9ae 	bl	8003eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0208 	orr.w	r2, r2, #8
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	619a      	str	r2, [r3, #24]
      break;
 8003bc2:	e064      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f9fe 	bl	8003fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6999      	ldr	r1, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	619a      	str	r2, [r3, #24]
      break;
 8003c04:	e043      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fa53 	bl	80040b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0208 	orr.w	r2, r2, #8
 8003c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0204 	bic.w	r2, r2, #4
 8003c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]
      break;
 8003c44:	e023      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 faa7 	bl	80041a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69d9      	ldr	r1, [r3, #28]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	61da      	str	r2, [r3, #28]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e031      	b.n	8003d1c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fabe 	bl	800424c <TIM_SlaveTimer_SetConfig>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e018      	b.n	8003d1c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d08:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d831      	bhi.n	8003d9c <HAL_TIM_ReadCapturedValue+0x78>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003d9d 	.word	0x08003d9d
 8003d48:	08003d9d 	.word	0x08003d9d
 8003d4c:	08003d9d 	.word	0x08003d9d
 8003d50:	08003d7f 	.word	0x08003d7f
 8003d54:	08003d9d 	.word	0x08003d9d
 8003d58:	08003d9d 	.word	0x08003d9d
 8003d5c:	08003d9d 	.word	0x08003d9d
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d9d 	.word	0x08003d9d
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003d9d 	.word	0x08003d9d
 8003d70:	08003d93 	.word	0x08003d93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	60fb      	str	r3, [r7, #12]

      break;
 8003d7c:	e00f      	b.n	8003d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	60fb      	str	r3, [r7, #12]

      break;
 8003d86:	e00a      	b.n	8003d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	60fb      	str	r3, [r7, #12]

      break;
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	60fb      	str	r3, [r7, #12]

      break;
 8003d9a:	e000      	b.n	8003d9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d9c:	bf00      	nop
  }

  return tmpreg;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a40      	ldr	r2, [pc, #256]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3d      	ldr	r2, [pc, #244]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d02b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d027      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d023      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d017      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <TIM_Base_SetConfig+0x128>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <TIM_Base_SetConfig+0x134>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <TIM_Base_SetConfig+0x138>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <TIM_Base_SetConfig+0x13c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40010400 	.word	0x40010400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	40001800 	.word	0x40001800
 8003ee4:	40001c00 	.word	0x40001c00
 8003ee8:	40002000 	.word	0x40002000

08003eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 0302 	bic.w	r3, r3, #2
 8003f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a20      	ldr	r2, [pc, #128]	; (8003fc4 <TIM_OC1_SetConfig+0xd8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_OC1_SetConfig+0x64>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <TIM_OC1_SetConfig+0xdc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10c      	bne.n	8003f6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0308 	bic.w	r3, r3, #8
 8003f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <TIM_OC1_SetConfig+0xd8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_OC1_SetConfig+0x8e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <TIM_OC1_SetConfig+0xdc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d111      	bne.n	8003f9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	621a      	str	r2, [r3, #32]
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40010400 	.word	0x40010400

08003fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0210 	bic.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0320 	bic.w	r3, r3, #32
 8004016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <TIM_OC2_SetConfig+0xe4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_OC2_SetConfig+0x68>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <TIM_OC2_SetConfig+0xe8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10d      	bne.n	8004050 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <TIM_OC2_SetConfig+0xe4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC2_SetConfig+0x94>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <TIM_OC2_SetConfig+0xe8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d113      	bne.n	8004088 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010400 	.word	0x40010400

080040b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <TIM_OC3_SetConfig+0xe0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_OC3_SetConfig+0x66>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a20      	ldr	r2, [pc, #128]	; (800419c <TIM_OC3_SetConfig+0xe4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10d      	bne.n	800413a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a16      	ldr	r2, [pc, #88]	; (8004198 <TIM_OC3_SetConfig+0xe0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC3_SetConfig+0x92>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <TIM_OC3_SetConfig+0xe4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d113      	bne.n	8004172 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	621a      	str	r2, [r3, #32]
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40010000 	.word	0x40010000
 800419c:	40010400 	.word	0x40010400

080041a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a12      	ldr	r2, [pc, #72]	; (8004244 <TIM_OC4_SetConfig+0xa4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC4_SetConfig+0x68>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a11      	ldr	r2, [pc, #68]	; (8004248 <TIM_OC4_SetConfig+0xa8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d109      	bne.n	800421c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40010400 	.word	0x40010400

0800424c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f023 0307 	bic.w	r3, r3, #7
 800427a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b70      	cmp	r3, #112	; 0x70
 8004294:	d01a      	beq.n	80042cc <TIM_SlaveTimer_SetConfig+0x80>
 8004296:	2b70      	cmp	r3, #112	; 0x70
 8004298:	d860      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 800429a:	2b60      	cmp	r3, #96	; 0x60
 800429c:	d054      	beq.n	8004348 <TIM_SlaveTimer_SetConfig+0xfc>
 800429e:	2b60      	cmp	r3, #96	; 0x60
 80042a0:	d85c      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042a2:	2b50      	cmp	r3, #80	; 0x50
 80042a4:	d046      	beq.n	8004334 <TIM_SlaveTimer_SetConfig+0xe8>
 80042a6:	2b50      	cmp	r3, #80	; 0x50
 80042a8:	d858      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d019      	beq.n	80042e2 <TIM_SlaveTimer_SetConfig+0x96>
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d854      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042b2:	2b30      	cmp	r3, #48	; 0x30
 80042b4:	d055      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d850      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d051      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d84c      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04d      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d04b      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042ca:	e047      	b.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68d9      	ldr	r1, [r3, #12]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f000 f9d1 	bl	8004682 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80042e0:	e040      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d101      	bne.n	80042ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03b      	b.n	8004366 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004314:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4313      	orrs	r3, r2
 8004320:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
      break;
 8004332:	e017      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	461a      	mov	r2, r3
 8004342:	f000 f889 	bl	8004458 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004346:	e00d      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	461a      	mov	r2, r3
 8004356:	f000 f8eb 	bl	8004530 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800435a:	e003      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	e000      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004362:	bf00      	nop
  }

  return status;
 8004364:	7dfb      	ldrb	r3, [r7, #23]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <TIM_TI1_SetConfig+0xcc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01b      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d017      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a25      	ldr	r2, [pc, #148]	; (8004440 <TIM_TI1_SetConfig+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a24      	ldr	r2, [pc, #144]	; (8004444 <TIM_TI1_SetConfig+0xd4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00f      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a23      	ldr	r2, [pc, #140]	; (8004448 <TIM_TI1_SetConfig+0xd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00b      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <TIM_TI1_SetConfig+0xdc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a21      	ldr	r2, [pc, #132]	; (8004450 <TIM_TI1_SetConfig+0xe0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a20      	ldr	r2, [pc, #128]	; (8004454 <TIM_TI1_SetConfig+0xe4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <TIM_TI1_SetConfig+0x6a>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <TIM_TI1_SetConfig+0x6c>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e003      	b.n	80043fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	b2db      	uxtb	r3, r3
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f023 030a 	bic.w	r3, r3, #10
 8004414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f003 030a 	and.w	r3, r3, #10
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40010400 	.word	0x40010400
 8004450:	40014000 	.word	0x40014000
 8004454:	40001800 	.word	0x40001800

08004458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f023 0210 	bic.w	r2, r3, #16
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f023 0210 	bic.w	r2, r3, #16
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800455a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800456c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 0303 	bic.w	r3, r3, #3
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80045e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004634:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004646:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	031b      	lsls	r3, r3, #12
 800464c:	b29b      	uxth	r3, r3
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800465a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	031b      	lsls	r3, r3, #12
 8004660:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004682:	b480      	push	{r7}
 8004684:	b087      	sub	sp, #28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	021a      	lsls	r2, r3, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	609a      	str	r2, [r3, #8]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b087      	sub	sp, #28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2201      	movs	r2, #1
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	401a      	ands	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	621a      	str	r2, [r3, #32]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004720:	2302      	movs	r3, #2
 8004722:	e05a      	b.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d022      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d01d      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d018      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10c      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40010400 	.word	0x40010400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40001800 	.word	0x40001800

08004804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e03f      	b.n	8004896 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fc fee8 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f929 	bl	8004aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800487c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08a      	sub	sp, #40	; 0x28
 80048a2:	af02      	add	r7, sp, #8
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d17c      	bne.n	80049b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_UART_Transmit+0x2c>
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e075      	b.n	80049ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Transmit+0x3e>
 80048d8:	2302      	movs	r3, #2
 80048da:	e06e      	b.n	80049ba <HAL_UART_Transmit+0x11c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2221      	movs	r2, #33	; 0x21
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048f2:	f7fd f863 	bl	80019bc <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d108      	bne.n	8004920 <HAL_UART_Transmit+0x82>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e003      	b.n	8004928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004930:	e02a      	b.n	8004988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	2180      	movs	r1, #128	; 0x80
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f840 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e036      	b.n	80049ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	3302      	adds	r3, #2
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	e007      	b.n	800497a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3301      	adds	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1cf      	bne.n	8004932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	2140      	movs	r1, #64	; 0x40
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f810 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e006      	b.n	80049ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b090      	sub	sp, #64	; 0x40
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d2:	e050      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049da:	d04c      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e2:	f7fc ffeb 	bl	80019bc <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d241      	bcs.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a12:	637a      	str	r2, [r7, #52]	; 0x34
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e5      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3314      	adds	r3, #20
 8004a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	613b      	str	r3, [r7, #16]
   return(result);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a46:	623a      	str	r2, [r7, #32]
 8004a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	69f9      	ldr	r1, [r7, #28]
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e5      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d09f      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3740      	adds	r7, #64	; 0x40
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b0c0      	sub	sp, #256	; 0x100
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	68d9      	ldr	r1, [r3, #12]
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	ea40 0301 	orr.w	r3, r0, r1
 8004ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004af8:	f021 010c 	bic.w	r1, r1, #12
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b06:	430b      	orrs	r3, r1
 8004b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1a:	6999      	ldr	r1, [r3, #24]
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	ea40 0301 	orr.w	r3, r0, r1
 8004b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b8f      	ldr	r3, [pc, #572]	; (8004d6c <UART_SetConfig+0x2cc>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d005      	beq.n	8004b40 <UART_SetConfig+0xa0>
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	; (8004d70 <UART_SetConfig+0x2d0>)
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d104      	bne.n	8004b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fc2c 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 8004b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b48:	e003      	b.n	8004b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4a:	f7fe fc13 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8004b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5c:	f040 810c 	bne.w	8004d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b82:	4621      	mov	r1, r4
 8004b84:	eb12 0801 	adds.w	r8, r2, r1
 8004b88:	4629      	mov	r1, r5
 8004b8a:	eb43 0901 	adc.w	r9, r3, r1
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba2:	4690      	mov	r8, r2
 8004ba4:	4699      	mov	r9, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	eb18 0303 	adds.w	r3, r8, r3
 8004bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	eb49 0303 	adc.w	r3, r9, r3
 8004bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bce:	460b      	mov	r3, r1
 8004bd0:	18db      	adds	r3, r3, r3
 8004bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	eb42 0303 	adc.w	r3, r2, r3
 8004bda:	657b      	str	r3, [r7, #84]	; 0x54
 8004bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004be4:	f7fb ff32 	bl	8000a4c <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004bee:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	011c      	lsls	r4, r3, #4
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c10:	415b      	adcs	r3, r3
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c18:	4641      	mov	r1, r8
 8004c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb43 0b01 	adc.w	fp, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c38:	4692      	mov	sl, r2
 8004c3a:	469b      	mov	fp, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c46:	464b      	mov	r3, r9
 8004c48:	eb4b 0303 	adc.w	r3, fp, r3
 8004c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c64:	460b      	mov	r3, r1
 8004c66:	18db      	adds	r3, r3, r3
 8004c68:	643b      	str	r3, [r7, #64]	; 0x40
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	eb42 0303 	adc.w	r3, r2, r3
 8004c70:	647b      	str	r3, [r7, #68]	; 0x44
 8004c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c7a:	f7fb fee7 	bl	8000a4c <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	4b3b      	ldr	r3, [pc, #236]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004c86:	fba3 2301 	umull	r2, r3, r3, r1
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2264      	movs	r2, #100	; 0x64
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	1acb      	subs	r3, r1, r3
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c9a:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca8:	441c      	add	r4, r3
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ccc:	4641      	mov	r1, r8
 8004cce:	1851      	adds	r1, r2, r1
 8004cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	414b      	adcs	r3, r1
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	00cb      	lsls	r3, r1, #3
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cee:	4651      	mov	r1, sl
 8004cf0:	00ca      	lsls	r2, r1, #3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d00:	464b      	mov	r3, r9
 8004d02:	460a      	mov	r2, r1
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d20:	460b      	mov	r3, r1
 8004d22:	18db      	adds	r3, r3, r3
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	4613      	mov	r3, r2
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d36:	f7fb fe89 	bl	8000a4c <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004d40:	fba3 1302 	umull	r1, r3, r3, r2
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	2164      	movs	r1, #100	; 0x64
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	3332      	adds	r3, #50	; 0x32
 8004d52:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	f003 0207 	and.w	r2, r3, #7
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4422      	add	r2, r4
 8004d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d68:	e106      	b.n	8004f78 <UART_SetConfig+0x4d8>
 8004d6a:	bf00      	nop
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	40011400 	.word	0x40011400
 8004d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	6239      	str	r1, [r7, #32]
 8004d92:	415b      	adcs	r3, r3
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
 8004d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	1854      	adds	r4, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0501 	adc.w	r5, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	00eb      	lsls	r3, r5, #3
 8004dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	eb45 0303 	adc.w	r3, r5, r3
 8004dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004de6:	4629      	mov	r1, r5
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	4621      	mov	r1, r4
 8004dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df0:	4621      	mov	r1, r4
 8004df2:	008a      	lsls	r2, r1, #2
 8004df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004df8:	f7fb fe28 	bl	8000a4c <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4b60      	ldr	r3, [pc, #384]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004e02:	fba3 2302 	umull	r2, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	011c      	lsls	r4, r3, #4
 8004e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	61b9      	str	r1, [r7, #24]
 8004e24:	415b      	adcs	r3, r3
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	1851      	adds	r1, r2, r1
 8004e30:	6139      	str	r1, [r7, #16]
 8004e32:	4649      	mov	r1, r9
 8004e34:	414b      	adcs	r3, r1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e44:	4659      	mov	r1, fp
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4651      	mov	r1, sl
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4642      	mov	r2, r8
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e60:	464b      	mov	r3, r9
 8004e62:	460a      	mov	r2, r1
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e84:	4649      	mov	r1, r9
 8004e86:	008b      	lsls	r3, r1, #2
 8004e88:	4641      	mov	r1, r8
 8004e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8e:	4641      	mov	r1, r8
 8004e90:	008a      	lsls	r2, r1, #2
 8004e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e96:	f7fb fdd9 	bl	8000a4c <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4b38      	ldr	r3, [pc, #224]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	; 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	3332      	adds	r3, #50	; 0x32
 8004eb4:	4a33      	ldr	r2, [pc, #204]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec0:	441c      	add	r4, r3
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	673b      	str	r3, [r7, #112]	; 0x70
 8004eca:	677a      	str	r2, [r7, #116]	; 0x74
 8004ecc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	1891      	adds	r1, r2, r2
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	415b      	adcs	r3, r3
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	1851      	adds	r1, r2, r1
 8004ee4:	6039      	str	r1, [r7, #0]
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	414b      	adcs	r3, r1
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef8:	4659      	mov	r1, fp
 8004efa:	00cb      	lsls	r3, r1, #3
 8004efc:	4651      	mov	r1, sl
 8004efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f02:	4651      	mov	r1, sl
 8004f04:	00ca      	lsls	r2, r1, #3
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f12:	464b      	mov	r3, r9
 8004f14:	460a      	mov	r2, r1
 8004f16:	eb42 0303 	adc.w	r3, r2, r3
 8004f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
 8004f26:	667a      	str	r2, [r7, #100]	; 0x64
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f34:	4649      	mov	r1, r9
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3e:	4641      	mov	r1, r8
 8004f40:	008a      	lsls	r2, r1, #2
 8004f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f46:	f7fb fd81 	bl	8000a4c <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	; 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	3332      	adds	r3, #50	; 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 020f 	and.w	r2, r3, #15
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f84:	51eb851f 	.word	0x51eb851f

08004f88 <std>:
 8004f88:	2300      	movs	r3, #0
 8004f8a:	b510      	push	{r4, lr}
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f96:	6083      	str	r3, [r0, #8]
 8004f98:	8181      	strh	r1, [r0, #12]
 8004f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f9c:	81c2      	strh	r2, [r0, #14]
 8004f9e:	6183      	str	r3, [r0, #24]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	305c      	adds	r0, #92	; 0x5c
 8004fa6:	f000 f906 	bl	80051b6 <memset>
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <std+0x58>)
 8004fac:	6263      	str	r3, [r4, #36]	; 0x24
 8004fae:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <std+0x5c>)
 8004fb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <std+0x60>)
 8004fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <std+0x64>)
 8004fb8:	6323      	str	r3, [r4, #48]	; 0x30
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <std+0x68>)
 8004fbc:	6224      	str	r4, [r4, #32]
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d006      	beq.n	8004fd0 <std+0x48>
 8004fc2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004fc6:	4294      	cmp	r4, r2
 8004fc8:	d002      	beq.n	8004fd0 <std+0x48>
 8004fca:	33d0      	adds	r3, #208	; 0xd0
 8004fcc:	429c      	cmp	r4, r3
 8004fce:	d105      	bne.n	8004fdc <std+0x54>
 8004fd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd8:	f000 b966 	b.w	80052a8 <__retarget_lock_init_recursive>
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	bf00      	nop
 8004fe0:	08005131 	.word	0x08005131
 8004fe4:	08005153 	.word	0x08005153
 8004fe8:	0800518b 	.word	0x0800518b
 8004fec:	080051af 	.word	0x080051af
 8004ff0:	200001b8 	.word	0x200001b8

08004ff4 <stdio_exit_handler>:
 8004ff4:	4a02      	ldr	r2, [pc, #8]	; (8005000 <stdio_exit_handler+0xc>)
 8004ff6:	4903      	ldr	r1, [pc, #12]	; (8005004 <stdio_exit_handler+0x10>)
 8004ff8:	4803      	ldr	r0, [pc, #12]	; (8005008 <stdio_exit_handler+0x14>)
 8004ffa:	f000 b869 	b.w	80050d0 <_fwalk_sglue>
 8004ffe:	bf00      	nop
 8005000:	2000000c 	.word	0x2000000c
 8005004:	08005b55 	.word	0x08005b55
 8005008:	20000018 	.word	0x20000018

0800500c <cleanup_stdio>:
 800500c:	6841      	ldr	r1, [r0, #4]
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <cleanup_stdio+0x34>)
 8005010:	4299      	cmp	r1, r3
 8005012:	b510      	push	{r4, lr}
 8005014:	4604      	mov	r4, r0
 8005016:	d001      	beq.n	800501c <cleanup_stdio+0x10>
 8005018:	f000 fd9c 	bl	8005b54 <_fflush_r>
 800501c:	68a1      	ldr	r1, [r4, #8]
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <cleanup_stdio+0x38>)
 8005020:	4299      	cmp	r1, r3
 8005022:	d002      	beq.n	800502a <cleanup_stdio+0x1e>
 8005024:	4620      	mov	r0, r4
 8005026:	f000 fd95 	bl	8005b54 <_fflush_r>
 800502a:	68e1      	ldr	r1, [r4, #12]
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <cleanup_stdio+0x3c>)
 800502e:	4299      	cmp	r1, r3
 8005030:	d004      	beq.n	800503c <cleanup_stdio+0x30>
 8005032:	4620      	mov	r0, r4
 8005034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005038:	f000 bd8c 	b.w	8005b54 <_fflush_r>
 800503c:	bd10      	pop	{r4, pc}
 800503e:	bf00      	nop
 8005040:	200001b8 	.word	0x200001b8
 8005044:	20000220 	.word	0x20000220
 8005048:	20000288 	.word	0x20000288

0800504c <global_stdio_init.part.0>:
 800504c:	b510      	push	{r4, lr}
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <global_stdio_init.part.0+0x30>)
 8005050:	4c0b      	ldr	r4, [pc, #44]	; (8005080 <global_stdio_init.part.0+0x34>)
 8005052:	4a0c      	ldr	r2, [pc, #48]	; (8005084 <global_stdio_init.part.0+0x38>)
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	4620      	mov	r0, r4
 8005058:	2200      	movs	r2, #0
 800505a:	2104      	movs	r1, #4
 800505c:	f7ff ff94 	bl	8004f88 <std>
 8005060:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005064:	2201      	movs	r2, #1
 8005066:	2109      	movs	r1, #9
 8005068:	f7ff ff8e 	bl	8004f88 <std>
 800506c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005070:	2202      	movs	r2, #2
 8005072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005076:	2112      	movs	r1, #18
 8005078:	f7ff bf86 	b.w	8004f88 <std>
 800507c:	200002f0 	.word	0x200002f0
 8005080:	200001b8 	.word	0x200001b8
 8005084:	08004ff5 	.word	0x08004ff5

08005088 <__sfp_lock_acquire>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__sfp_lock_acquire+0x8>)
 800508a:	f000 b90e 	b.w	80052aa <__retarget_lock_acquire_recursive>
 800508e:	bf00      	nop
 8005090:	200002f9 	.word	0x200002f9

08005094 <__sfp_lock_release>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__sfp_lock_release+0x8>)
 8005096:	f000 b909 	b.w	80052ac <__retarget_lock_release_recursive>
 800509a:	bf00      	nop
 800509c:	200002f9 	.word	0x200002f9

080050a0 <__sinit>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4604      	mov	r4, r0
 80050a4:	f7ff fff0 	bl	8005088 <__sfp_lock_acquire>
 80050a8:	6a23      	ldr	r3, [r4, #32]
 80050aa:	b11b      	cbz	r3, 80050b4 <__sinit+0x14>
 80050ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b0:	f7ff bff0 	b.w	8005094 <__sfp_lock_release>
 80050b4:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <__sinit+0x28>)
 80050b6:	6223      	str	r3, [r4, #32]
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <__sinit+0x2c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f5      	bne.n	80050ac <__sinit+0xc>
 80050c0:	f7ff ffc4 	bl	800504c <global_stdio_init.part.0>
 80050c4:	e7f2      	b.n	80050ac <__sinit+0xc>
 80050c6:	bf00      	nop
 80050c8:	0800500d 	.word	0x0800500d
 80050cc:	200002f0 	.word	0x200002f0

080050d0 <_fwalk_sglue>:
 80050d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d4:	4607      	mov	r7, r0
 80050d6:	4688      	mov	r8, r1
 80050d8:	4614      	mov	r4, r2
 80050da:	2600      	movs	r6, #0
 80050dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050e0:	f1b9 0901 	subs.w	r9, r9, #1
 80050e4:	d505      	bpl.n	80050f2 <_fwalk_sglue+0x22>
 80050e6:	6824      	ldr	r4, [r4, #0]
 80050e8:	2c00      	cmp	r4, #0
 80050ea:	d1f7      	bne.n	80050dc <_fwalk_sglue+0xc>
 80050ec:	4630      	mov	r0, r6
 80050ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f2:	89ab      	ldrh	r3, [r5, #12]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d907      	bls.n	8005108 <_fwalk_sglue+0x38>
 80050f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050fc:	3301      	adds	r3, #1
 80050fe:	d003      	beq.n	8005108 <_fwalk_sglue+0x38>
 8005100:	4629      	mov	r1, r5
 8005102:	4638      	mov	r0, r7
 8005104:	47c0      	blx	r8
 8005106:	4306      	orrs	r6, r0
 8005108:	3568      	adds	r5, #104	; 0x68
 800510a:	e7e9      	b.n	80050e0 <_fwalk_sglue+0x10>

0800510c <iprintf>:
 800510c:	b40f      	push	{r0, r1, r2, r3}
 800510e:	b507      	push	{r0, r1, r2, lr}
 8005110:	4906      	ldr	r1, [pc, #24]	; (800512c <iprintf+0x20>)
 8005112:	ab04      	add	r3, sp, #16
 8005114:	6808      	ldr	r0, [r1, #0]
 8005116:	f853 2b04 	ldr.w	r2, [r3], #4
 800511a:	6881      	ldr	r1, [r0, #8]
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	f000 f9e9 	bl	80054f4 <_vfiprintf_r>
 8005122:	b003      	add	sp, #12
 8005124:	f85d eb04 	ldr.w	lr, [sp], #4
 8005128:	b004      	add	sp, #16
 800512a:	4770      	bx	lr
 800512c:	20000064 	.word	0x20000064

08005130 <__sread>:
 8005130:	b510      	push	{r4, lr}
 8005132:	460c      	mov	r4, r1
 8005134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005138:	f000 f868 	bl	800520c <_read_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	bfab      	itete	ge
 8005140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005142:	89a3      	ldrhlt	r3, [r4, #12]
 8005144:	181b      	addge	r3, r3, r0
 8005146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800514a:	bfac      	ite	ge
 800514c:	6563      	strge	r3, [r4, #84]	; 0x54
 800514e:	81a3      	strhlt	r3, [r4, #12]
 8005150:	bd10      	pop	{r4, pc}

08005152 <__swrite>:
 8005152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005156:	461f      	mov	r7, r3
 8005158:	898b      	ldrh	r3, [r1, #12]
 800515a:	05db      	lsls	r3, r3, #23
 800515c:	4605      	mov	r5, r0
 800515e:	460c      	mov	r4, r1
 8005160:	4616      	mov	r6, r2
 8005162:	d505      	bpl.n	8005170 <__swrite+0x1e>
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	2302      	movs	r3, #2
 800516a:	2200      	movs	r2, #0
 800516c:	f000 f83c 	bl	80051e8 <_lseek_r>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	4632      	mov	r2, r6
 800517e:	463b      	mov	r3, r7
 8005180:	4628      	mov	r0, r5
 8005182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	f000 b853 	b.w	8005230 <_write_r>

0800518a <__sseek>:
 800518a:	b510      	push	{r4, lr}
 800518c:	460c      	mov	r4, r1
 800518e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005192:	f000 f829 	bl	80051e8 <_lseek_r>
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	bf15      	itete	ne
 800519c:	6560      	strne	r0, [r4, #84]	; 0x54
 800519e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051a6:	81a3      	strheq	r3, [r4, #12]
 80051a8:	bf18      	it	ne
 80051aa:	81a3      	strhne	r3, [r4, #12]
 80051ac:	bd10      	pop	{r4, pc}

080051ae <__sclose>:
 80051ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b2:	f000 b809 	b.w	80051c8 <_close_r>

080051b6 <memset>:
 80051b6:	4402      	add	r2, r0
 80051b8:	4603      	mov	r3, r0
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d100      	bne.n	80051c0 <memset+0xa>
 80051be:	4770      	bx	lr
 80051c0:	f803 1b01 	strb.w	r1, [r3], #1
 80051c4:	e7f9      	b.n	80051ba <memset+0x4>
	...

080051c8 <_close_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4d06      	ldr	r5, [pc, #24]	; (80051e4 <_close_r+0x1c>)
 80051cc:	2300      	movs	r3, #0
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	f7fc fae5 	bl	80017a2 <_close>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_close_r+0x1a>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_close_r+0x1a>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200002f4 	.word	0x200002f4

080051e8 <_lseek_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	; (8005208 <_lseek_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fc fafa 	bl	80017f0 <_lseek>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_lseek_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_lseek_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200002f4 	.word	0x200002f4

0800520c <_read_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	; (800522c <_read_r+0x20>)
 8005210:	4604      	mov	r4, r0
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	2200      	movs	r2, #0
 8005218:	602a      	str	r2, [r5, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7fc fa88 	bl	8001730 <_read>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_read_r+0x1e>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_read_r+0x1e>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200002f4 	.word	0x200002f4

08005230 <_write_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d07      	ldr	r5, [pc, #28]	; (8005250 <_write_r+0x20>)
 8005234:	4604      	mov	r4, r0
 8005236:	4608      	mov	r0, r1
 8005238:	4611      	mov	r1, r2
 800523a:	2200      	movs	r2, #0
 800523c:	602a      	str	r2, [r5, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f7fc fa93 	bl	800176a <_write>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_write_r+0x1e>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_write_r+0x1e>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	200002f4 	.word	0x200002f4

08005254 <__errno>:
 8005254:	4b01      	ldr	r3, [pc, #4]	; (800525c <__errno+0x8>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20000064 	.word	0x20000064

08005260 <__libc_init_array>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	4d0d      	ldr	r5, [pc, #52]	; (8005298 <__libc_init_array+0x38>)
 8005264:	4c0d      	ldr	r4, [pc, #52]	; (800529c <__libc_init_array+0x3c>)
 8005266:	1b64      	subs	r4, r4, r5
 8005268:	10a4      	asrs	r4, r4, #2
 800526a:	2600      	movs	r6, #0
 800526c:	42a6      	cmp	r6, r4
 800526e:	d109      	bne.n	8005284 <__libc_init_array+0x24>
 8005270:	4d0b      	ldr	r5, [pc, #44]	; (80052a0 <__libc_init_array+0x40>)
 8005272:	4c0c      	ldr	r4, [pc, #48]	; (80052a4 <__libc_init_array+0x44>)
 8005274:	f000 fdc0 	bl	8005df8 <_init>
 8005278:	1b64      	subs	r4, r4, r5
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	2600      	movs	r6, #0
 800527e:	42a6      	cmp	r6, r4
 8005280:	d105      	bne.n	800528e <__libc_init_array+0x2e>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f855 3b04 	ldr.w	r3, [r5], #4
 8005288:	4798      	blx	r3
 800528a:	3601      	adds	r6, #1
 800528c:	e7ee      	b.n	800526c <__libc_init_array+0xc>
 800528e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005292:	4798      	blx	r3
 8005294:	3601      	adds	r6, #1
 8005296:	e7f2      	b.n	800527e <__libc_init_array+0x1e>
 8005298:	08005e80 	.word	0x08005e80
 800529c:	08005e80 	.word	0x08005e80
 80052a0:	08005e80 	.word	0x08005e80
 80052a4:	08005e84 	.word	0x08005e84

080052a8 <__retarget_lock_init_recursive>:
 80052a8:	4770      	bx	lr

080052aa <__retarget_lock_acquire_recursive>:
 80052aa:	4770      	bx	lr

080052ac <__retarget_lock_release_recursive>:
 80052ac:	4770      	bx	lr
	...

080052b0 <_free_r>:
 80052b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b2:	2900      	cmp	r1, #0
 80052b4:	d044      	beq.n	8005340 <_free_r+0x90>
 80052b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ba:	9001      	str	r0, [sp, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f1a1 0404 	sub.w	r4, r1, #4
 80052c2:	bfb8      	it	lt
 80052c4:	18e4      	addlt	r4, r4, r3
 80052c6:	f000 f8df 	bl	8005488 <__malloc_lock>
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <_free_r+0x94>)
 80052cc:	9801      	ldr	r0, [sp, #4]
 80052ce:	6813      	ldr	r3, [r2, #0]
 80052d0:	b933      	cbnz	r3, 80052e0 <_free_r+0x30>
 80052d2:	6063      	str	r3, [r4, #4]
 80052d4:	6014      	str	r4, [r2, #0]
 80052d6:	b003      	add	sp, #12
 80052d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052dc:	f000 b8da 	b.w	8005494 <__malloc_unlock>
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	d908      	bls.n	80052f6 <_free_r+0x46>
 80052e4:	6825      	ldr	r5, [r4, #0]
 80052e6:	1961      	adds	r1, r4, r5
 80052e8:	428b      	cmp	r3, r1
 80052ea:	bf01      	itttt	eq
 80052ec:	6819      	ldreq	r1, [r3, #0]
 80052ee:	685b      	ldreq	r3, [r3, #4]
 80052f0:	1949      	addeq	r1, r1, r5
 80052f2:	6021      	streq	r1, [r4, #0]
 80052f4:	e7ed      	b.n	80052d2 <_free_r+0x22>
 80052f6:	461a      	mov	r2, r3
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	b10b      	cbz	r3, 8005300 <_free_r+0x50>
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	d9fa      	bls.n	80052f6 <_free_r+0x46>
 8005300:	6811      	ldr	r1, [r2, #0]
 8005302:	1855      	adds	r5, r2, r1
 8005304:	42a5      	cmp	r5, r4
 8005306:	d10b      	bne.n	8005320 <_free_r+0x70>
 8005308:	6824      	ldr	r4, [r4, #0]
 800530a:	4421      	add	r1, r4
 800530c:	1854      	adds	r4, r2, r1
 800530e:	42a3      	cmp	r3, r4
 8005310:	6011      	str	r1, [r2, #0]
 8005312:	d1e0      	bne.n	80052d6 <_free_r+0x26>
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	6053      	str	r3, [r2, #4]
 800531a:	440c      	add	r4, r1
 800531c:	6014      	str	r4, [r2, #0]
 800531e:	e7da      	b.n	80052d6 <_free_r+0x26>
 8005320:	d902      	bls.n	8005328 <_free_r+0x78>
 8005322:	230c      	movs	r3, #12
 8005324:	6003      	str	r3, [r0, #0]
 8005326:	e7d6      	b.n	80052d6 <_free_r+0x26>
 8005328:	6825      	ldr	r5, [r4, #0]
 800532a:	1961      	adds	r1, r4, r5
 800532c:	428b      	cmp	r3, r1
 800532e:	bf04      	itt	eq
 8005330:	6819      	ldreq	r1, [r3, #0]
 8005332:	685b      	ldreq	r3, [r3, #4]
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	bf04      	itt	eq
 8005338:	1949      	addeq	r1, r1, r5
 800533a:	6021      	streq	r1, [r4, #0]
 800533c:	6054      	str	r4, [r2, #4]
 800533e:	e7ca      	b.n	80052d6 <_free_r+0x26>
 8005340:	b003      	add	sp, #12
 8005342:	bd30      	pop	{r4, r5, pc}
 8005344:	200002fc 	.word	0x200002fc

08005348 <sbrk_aligned>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4e0e      	ldr	r6, [pc, #56]	; (8005384 <sbrk_aligned+0x3c>)
 800534c:	460c      	mov	r4, r1
 800534e:	6831      	ldr	r1, [r6, #0]
 8005350:	4605      	mov	r5, r0
 8005352:	b911      	cbnz	r1, 800535a <sbrk_aligned+0x12>
 8005354:	f000 fcbc 	bl	8005cd0 <_sbrk_r>
 8005358:	6030      	str	r0, [r6, #0]
 800535a:	4621      	mov	r1, r4
 800535c:	4628      	mov	r0, r5
 800535e:	f000 fcb7 	bl	8005cd0 <_sbrk_r>
 8005362:	1c43      	adds	r3, r0, #1
 8005364:	d00a      	beq.n	800537c <sbrk_aligned+0x34>
 8005366:	1cc4      	adds	r4, r0, #3
 8005368:	f024 0403 	bic.w	r4, r4, #3
 800536c:	42a0      	cmp	r0, r4
 800536e:	d007      	beq.n	8005380 <sbrk_aligned+0x38>
 8005370:	1a21      	subs	r1, r4, r0
 8005372:	4628      	mov	r0, r5
 8005374:	f000 fcac 	bl	8005cd0 <_sbrk_r>
 8005378:	3001      	adds	r0, #1
 800537a:	d101      	bne.n	8005380 <sbrk_aligned+0x38>
 800537c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005380:	4620      	mov	r0, r4
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	20000300 	.word	0x20000300

08005388 <_malloc_r>:
 8005388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800538c:	1ccd      	adds	r5, r1, #3
 800538e:	f025 0503 	bic.w	r5, r5, #3
 8005392:	3508      	adds	r5, #8
 8005394:	2d0c      	cmp	r5, #12
 8005396:	bf38      	it	cc
 8005398:	250c      	movcc	r5, #12
 800539a:	2d00      	cmp	r5, #0
 800539c:	4607      	mov	r7, r0
 800539e:	db01      	blt.n	80053a4 <_malloc_r+0x1c>
 80053a0:	42a9      	cmp	r1, r5
 80053a2:	d905      	bls.n	80053b0 <_malloc_r+0x28>
 80053a4:	230c      	movs	r3, #12
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	2600      	movs	r6, #0
 80053aa:	4630      	mov	r0, r6
 80053ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005484 <_malloc_r+0xfc>
 80053b4:	f000 f868 	bl	8005488 <__malloc_lock>
 80053b8:	f8d8 3000 	ldr.w	r3, [r8]
 80053bc:	461c      	mov	r4, r3
 80053be:	bb5c      	cbnz	r4, 8005418 <_malloc_r+0x90>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4638      	mov	r0, r7
 80053c4:	f7ff ffc0 	bl	8005348 <sbrk_aligned>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	4604      	mov	r4, r0
 80053cc:	d155      	bne.n	800547a <_malloc_r+0xf2>
 80053ce:	f8d8 4000 	ldr.w	r4, [r8]
 80053d2:	4626      	mov	r6, r4
 80053d4:	2e00      	cmp	r6, #0
 80053d6:	d145      	bne.n	8005464 <_malloc_r+0xdc>
 80053d8:	2c00      	cmp	r4, #0
 80053da:	d048      	beq.n	800546e <_malloc_r+0xe6>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	4631      	mov	r1, r6
 80053e0:	4638      	mov	r0, r7
 80053e2:	eb04 0903 	add.w	r9, r4, r3
 80053e6:	f000 fc73 	bl	8005cd0 <_sbrk_r>
 80053ea:	4581      	cmp	r9, r0
 80053ec:	d13f      	bne.n	800546e <_malloc_r+0xe6>
 80053ee:	6821      	ldr	r1, [r4, #0]
 80053f0:	1a6d      	subs	r5, r5, r1
 80053f2:	4629      	mov	r1, r5
 80053f4:	4638      	mov	r0, r7
 80053f6:	f7ff ffa7 	bl	8005348 <sbrk_aligned>
 80053fa:	3001      	adds	r0, #1
 80053fc:	d037      	beq.n	800546e <_malloc_r+0xe6>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	442b      	add	r3, r5
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	f8d8 3000 	ldr.w	r3, [r8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d038      	beq.n	800547e <_malloc_r+0xf6>
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	42a2      	cmp	r2, r4
 8005410:	d12b      	bne.n	800546a <_malloc_r+0xe2>
 8005412:	2200      	movs	r2, #0
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	e00f      	b.n	8005438 <_malloc_r+0xb0>
 8005418:	6822      	ldr	r2, [r4, #0]
 800541a:	1b52      	subs	r2, r2, r5
 800541c:	d41f      	bmi.n	800545e <_malloc_r+0xd6>
 800541e:	2a0b      	cmp	r2, #11
 8005420:	d917      	bls.n	8005452 <_malloc_r+0xca>
 8005422:	1961      	adds	r1, r4, r5
 8005424:	42a3      	cmp	r3, r4
 8005426:	6025      	str	r5, [r4, #0]
 8005428:	bf18      	it	ne
 800542a:	6059      	strne	r1, [r3, #4]
 800542c:	6863      	ldr	r3, [r4, #4]
 800542e:	bf08      	it	eq
 8005430:	f8c8 1000 	streq.w	r1, [r8]
 8005434:	5162      	str	r2, [r4, r5]
 8005436:	604b      	str	r3, [r1, #4]
 8005438:	4638      	mov	r0, r7
 800543a:	f104 060b 	add.w	r6, r4, #11
 800543e:	f000 f829 	bl	8005494 <__malloc_unlock>
 8005442:	f026 0607 	bic.w	r6, r6, #7
 8005446:	1d23      	adds	r3, r4, #4
 8005448:	1af2      	subs	r2, r6, r3
 800544a:	d0ae      	beq.n	80053aa <_malloc_r+0x22>
 800544c:	1b9b      	subs	r3, r3, r6
 800544e:	50a3      	str	r3, [r4, r2]
 8005450:	e7ab      	b.n	80053aa <_malloc_r+0x22>
 8005452:	42a3      	cmp	r3, r4
 8005454:	6862      	ldr	r2, [r4, #4]
 8005456:	d1dd      	bne.n	8005414 <_malloc_r+0x8c>
 8005458:	f8c8 2000 	str.w	r2, [r8]
 800545c:	e7ec      	b.n	8005438 <_malloc_r+0xb0>
 800545e:	4623      	mov	r3, r4
 8005460:	6864      	ldr	r4, [r4, #4]
 8005462:	e7ac      	b.n	80053be <_malloc_r+0x36>
 8005464:	4634      	mov	r4, r6
 8005466:	6876      	ldr	r6, [r6, #4]
 8005468:	e7b4      	b.n	80053d4 <_malloc_r+0x4c>
 800546a:	4613      	mov	r3, r2
 800546c:	e7cc      	b.n	8005408 <_malloc_r+0x80>
 800546e:	230c      	movs	r3, #12
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	4638      	mov	r0, r7
 8005474:	f000 f80e 	bl	8005494 <__malloc_unlock>
 8005478:	e797      	b.n	80053aa <_malloc_r+0x22>
 800547a:	6025      	str	r5, [r4, #0]
 800547c:	e7dc      	b.n	8005438 <_malloc_r+0xb0>
 800547e:	605b      	str	r3, [r3, #4]
 8005480:	deff      	udf	#255	; 0xff
 8005482:	bf00      	nop
 8005484:	200002fc 	.word	0x200002fc

08005488 <__malloc_lock>:
 8005488:	4801      	ldr	r0, [pc, #4]	; (8005490 <__malloc_lock+0x8>)
 800548a:	f7ff bf0e 	b.w	80052aa <__retarget_lock_acquire_recursive>
 800548e:	bf00      	nop
 8005490:	200002f8 	.word	0x200002f8

08005494 <__malloc_unlock>:
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <__malloc_unlock+0x8>)
 8005496:	f7ff bf09 	b.w	80052ac <__retarget_lock_release_recursive>
 800549a:	bf00      	nop
 800549c:	200002f8 	.word	0x200002f8

080054a0 <__sfputc_r>:
 80054a0:	6893      	ldr	r3, [r2, #8]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	b410      	push	{r4}
 80054a8:	6093      	str	r3, [r2, #8]
 80054aa:	da08      	bge.n	80054be <__sfputc_r+0x1e>
 80054ac:	6994      	ldr	r4, [r2, #24]
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	db01      	blt.n	80054b6 <__sfputc_r+0x16>
 80054b2:	290a      	cmp	r1, #10
 80054b4:	d103      	bne.n	80054be <__sfputc_r+0x1e>
 80054b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ba:	f000 bb73 	b.w	8005ba4 <__swbuf_r>
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	1c58      	adds	r0, r3, #1
 80054c2:	6010      	str	r0, [r2, #0]
 80054c4:	7019      	strb	r1, [r3, #0]
 80054c6:	4608      	mov	r0, r1
 80054c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <__sfputs_r>:
 80054ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d0:	4606      	mov	r6, r0
 80054d2:	460f      	mov	r7, r1
 80054d4:	4614      	mov	r4, r2
 80054d6:	18d5      	adds	r5, r2, r3
 80054d8:	42ac      	cmp	r4, r5
 80054da:	d101      	bne.n	80054e0 <__sfputs_r+0x12>
 80054dc:	2000      	movs	r0, #0
 80054de:	e007      	b.n	80054f0 <__sfputs_r+0x22>
 80054e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e4:	463a      	mov	r2, r7
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ffda 	bl	80054a0 <__sfputc_r>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d1f3      	bne.n	80054d8 <__sfputs_r+0xa>
 80054f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054f4 <_vfiprintf_r>:
 80054f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f8:	460d      	mov	r5, r1
 80054fa:	b09d      	sub	sp, #116	; 0x74
 80054fc:	4614      	mov	r4, r2
 80054fe:	4698      	mov	r8, r3
 8005500:	4606      	mov	r6, r0
 8005502:	b118      	cbz	r0, 800550c <_vfiprintf_r+0x18>
 8005504:	6a03      	ldr	r3, [r0, #32]
 8005506:	b90b      	cbnz	r3, 800550c <_vfiprintf_r+0x18>
 8005508:	f7ff fdca 	bl	80050a0 <__sinit>
 800550c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800550e:	07d9      	lsls	r1, r3, #31
 8005510:	d405      	bmi.n	800551e <_vfiprintf_r+0x2a>
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	059a      	lsls	r2, r3, #22
 8005516:	d402      	bmi.n	800551e <_vfiprintf_r+0x2a>
 8005518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800551a:	f7ff fec6 	bl	80052aa <__retarget_lock_acquire_recursive>
 800551e:	89ab      	ldrh	r3, [r5, #12]
 8005520:	071b      	lsls	r3, r3, #28
 8005522:	d501      	bpl.n	8005528 <_vfiprintf_r+0x34>
 8005524:	692b      	ldr	r3, [r5, #16]
 8005526:	b99b      	cbnz	r3, 8005550 <_vfiprintf_r+0x5c>
 8005528:	4629      	mov	r1, r5
 800552a:	4630      	mov	r0, r6
 800552c:	f000 fb78 	bl	8005c20 <__swsetup_r>
 8005530:	b170      	cbz	r0, 8005550 <_vfiprintf_r+0x5c>
 8005532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005534:	07dc      	lsls	r4, r3, #31
 8005536:	d504      	bpl.n	8005542 <_vfiprintf_r+0x4e>
 8005538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800553c:	b01d      	add	sp, #116	; 0x74
 800553e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005542:	89ab      	ldrh	r3, [r5, #12]
 8005544:	0598      	lsls	r0, r3, #22
 8005546:	d4f7      	bmi.n	8005538 <_vfiprintf_r+0x44>
 8005548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800554a:	f7ff feaf 	bl	80052ac <__retarget_lock_release_recursive>
 800554e:	e7f3      	b.n	8005538 <_vfiprintf_r+0x44>
 8005550:	2300      	movs	r3, #0
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	2320      	movs	r3, #32
 8005556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800555a:	f8cd 800c 	str.w	r8, [sp, #12]
 800555e:	2330      	movs	r3, #48	; 0x30
 8005560:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005714 <_vfiprintf_r+0x220>
 8005564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005568:	f04f 0901 	mov.w	r9, #1
 800556c:	4623      	mov	r3, r4
 800556e:	469a      	mov	sl, r3
 8005570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005574:	b10a      	cbz	r2, 800557a <_vfiprintf_r+0x86>
 8005576:	2a25      	cmp	r2, #37	; 0x25
 8005578:	d1f9      	bne.n	800556e <_vfiprintf_r+0x7a>
 800557a:	ebba 0b04 	subs.w	fp, sl, r4
 800557e:	d00b      	beq.n	8005598 <_vfiprintf_r+0xa4>
 8005580:	465b      	mov	r3, fp
 8005582:	4622      	mov	r2, r4
 8005584:	4629      	mov	r1, r5
 8005586:	4630      	mov	r0, r6
 8005588:	f7ff ffa1 	bl	80054ce <__sfputs_r>
 800558c:	3001      	adds	r0, #1
 800558e:	f000 80a9 	beq.w	80056e4 <_vfiprintf_r+0x1f0>
 8005592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005594:	445a      	add	r2, fp
 8005596:	9209      	str	r2, [sp, #36]	; 0x24
 8005598:	f89a 3000 	ldrb.w	r3, [sl]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a1 	beq.w	80056e4 <_vfiprintf_r+0x1f0>
 80055a2:	2300      	movs	r3, #0
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ac:	f10a 0a01 	add.w	sl, sl, #1
 80055b0:	9304      	str	r3, [sp, #16]
 80055b2:	9307      	str	r3, [sp, #28]
 80055b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055b8:	931a      	str	r3, [sp, #104]	; 0x68
 80055ba:	4654      	mov	r4, sl
 80055bc:	2205      	movs	r2, #5
 80055be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c2:	4854      	ldr	r0, [pc, #336]	; (8005714 <_vfiprintf_r+0x220>)
 80055c4:	f7fa fe04 	bl	80001d0 <memchr>
 80055c8:	9a04      	ldr	r2, [sp, #16]
 80055ca:	b9d8      	cbnz	r0, 8005604 <_vfiprintf_r+0x110>
 80055cc:	06d1      	lsls	r1, r2, #27
 80055ce:	bf44      	itt	mi
 80055d0:	2320      	movmi	r3, #32
 80055d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055d6:	0713      	lsls	r3, r2, #28
 80055d8:	bf44      	itt	mi
 80055da:	232b      	movmi	r3, #43	; 0x2b
 80055dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e0:	f89a 3000 	ldrb.w	r3, [sl]
 80055e4:	2b2a      	cmp	r3, #42	; 0x2a
 80055e6:	d015      	beq.n	8005614 <_vfiprintf_r+0x120>
 80055e8:	9a07      	ldr	r2, [sp, #28]
 80055ea:	4654      	mov	r4, sl
 80055ec:	2000      	movs	r0, #0
 80055ee:	f04f 0c0a 	mov.w	ip, #10
 80055f2:	4621      	mov	r1, r4
 80055f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055f8:	3b30      	subs	r3, #48	; 0x30
 80055fa:	2b09      	cmp	r3, #9
 80055fc:	d94d      	bls.n	800569a <_vfiprintf_r+0x1a6>
 80055fe:	b1b0      	cbz	r0, 800562e <_vfiprintf_r+0x13a>
 8005600:	9207      	str	r2, [sp, #28]
 8005602:	e014      	b.n	800562e <_vfiprintf_r+0x13a>
 8005604:	eba0 0308 	sub.w	r3, r0, r8
 8005608:	fa09 f303 	lsl.w	r3, r9, r3
 800560c:	4313      	orrs	r3, r2
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	46a2      	mov	sl, r4
 8005612:	e7d2      	b.n	80055ba <_vfiprintf_r+0xc6>
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	1d19      	adds	r1, r3, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	9103      	str	r1, [sp, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	bfbb      	ittet	lt
 8005620:	425b      	neglt	r3, r3
 8005622:	f042 0202 	orrlt.w	r2, r2, #2
 8005626:	9307      	strge	r3, [sp, #28]
 8005628:	9307      	strlt	r3, [sp, #28]
 800562a:	bfb8      	it	lt
 800562c:	9204      	strlt	r2, [sp, #16]
 800562e:	7823      	ldrb	r3, [r4, #0]
 8005630:	2b2e      	cmp	r3, #46	; 0x2e
 8005632:	d10c      	bne.n	800564e <_vfiprintf_r+0x15a>
 8005634:	7863      	ldrb	r3, [r4, #1]
 8005636:	2b2a      	cmp	r3, #42	; 0x2a
 8005638:	d134      	bne.n	80056a4 <_vfiprintf_r+0x1b0>
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	1d1a      	adds	r2, r3, #4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	9203      	str	r2, [sp, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	bfb8      	it	lt
 8005646:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800564a:	3402      	adds	r4, #2
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005724 <_vfiprintf_r+0x230>
 8005652:	7821      	ldrb	r1, [r4, #0]
 8005654:	2203      	movs	r2, #3
 8005656:	4650      	mov	r0, sl
 8005658:	f7fa fdba 	bl	80001d0 <memchr>
 800565c:	b138      	cbz	r0, 800566e <_vfiprintf_r+0x17a>
 800565e:	9b04      	ldr	r3, [sp, #16]
 8005660:	eba0 000a 	sub.w	r0, r0, sl
 8005664:	2240      	movs	r2, #64	; 0x40
 8005666:	4082      	lsls	r2, r0
 8005668:	4313      	orrs	r3, r2
 800566a:	3401      	adds	r4, #1
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005672:	4829      	ldr	r0, [pc, #164]	; (8005718 <_vfiprintf_r+0x224>)
 8005674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005678:	2206      	movs	r2, #6
 800567a:	f7fa fda9 	bl	80001d0 <memchr>
 800567e:	2800      	cmp	r0, #0
 8005680:	d03f      	beq.n	8005702 <_vfiprintf_r+0x20e>
 8005682:	4b26      	ldr	r3, [pc, #152]	; (800571c <_vfiprintf_r+0x228>)
 8005684:	bb1b      	cbnz	r3, 80056ce <_vfiprintf_r+0x1da>
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	3307      	adds	r3, #7
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	3308      	adds	r3, #8
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005694:	443b      	add	r3, r7
 8005696:	9309      	str	r3, [sp, #36]	; 0x24
 8005698:	e768      	b.n	800556c <_vfiprintf_r+0x78>
 800569a:	fb0c 3202 	mla	r2, ip, r2, r3
 800569e:	460c      	mov	r4, r1
 80056a0:	2001      	movs	r0, #1
 80056a2:	e7a6      	b.n	80055f2 <_vfiprintf_r+0xfe>
 80056a4:	2300      	movs	r3, #0
 80056a6:	3401      	adds	r4, #1
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	4619      	mov	r1, r3
 80056ac:	f04f 0c0a 	mov.w	ip, #10
 80056b0:	4620      	mov	r0, r4
 80056b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056b6:	3a30      	subs	r2, #48	; 0x30
 80056b8:	2a09      	cmp	r2, #9
 80056ba:	d903      	bls.n	80056c4 <_vfiprintf_r+0x1d0>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0c6      	beq.n	800564e <_vfiprintf_r+0x15a>
 80056c0:	9105      	str	r1, [sp, #20]
 80056c2:	e7c4      	b.n	800564e <_vfiprintf_r+0x15a>
 80056c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056c8:	4604      	mov	r4, r0
 80056ca:	2301      	movs	r3, #1
 80056cc:	e7f0      	b.n	80056b0 <_vfiprintf_r+0x1bc>
 80056ce:	ab03      	add	r3, sp, #12
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	462a      	mov	r2, r5
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <_vfiprintf_r+0x22c>)
 80056d6:	a904      	add	r1, sp, #16
 80056d8:	4630      	mov	r0, r6
 80056da:	f3af 8000 	nop.w
 80056de:	4607      	mov	r7, r0
 80056e0:	1c78      	adds	r0, r7, #1
 80056e2:	d1d6      	bne.n	8005692 <_vfiprintf_r+0x19e>
 80056e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e6:	07d9      	lsls	r1, r3, #31
 80056e8:	d405      	bmi.n	80056f6 <_vfiprintf_r+0x202>
 80056ea:	89ab      	ldrh	r3, [r5, #12]
 80056ec:	059a      	lsls	r2, r3, #22
 80056ee:	d402      	bmi.n	80056f6 <_vfiprintf_r+0x202>
 80056f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056f2:	f7ff fddb 	bl	80052ac <__retarget_lock_release_recursive>
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	065b      	lsls	r3, r3, #25
 80056fa:	f53f af1d 	bmi.w	8005538 <_vfiprintf_r+0x44>
 80056fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005700:	e71c      	b.n	800553c <_vfiprintf_r+0x48>
 8005702:	ab03      	add	r3, sp, #12
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	462a      	mov	r2, r5
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <_vfiprintf_r+0x22c>)
 800570a:	a904      	add	r1, sp, #16
 800570c:	4630      	mov	r0, r6
 800570e:	f000 f879 	bl	8005804 <_printf_i>
 8005712:	e7e4      	b.n	80056de <_vfiprintf_r+0x1ea>
 8005714:	08005e44 	.word	0x08005e44
 8005718:	08005e4e 	.word	0x08005e4e
 800571c:	00000000 	.word	0x00000000
 8005720:	080054cf 	.word	0x080054cf
 8005724:	08005e4a 	.word	0x08005e4a

08005728 <_printf_common>:
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	4616      	mov	r6, r2
 800572e:	4699      	mov	r9, r3
 8005730:	688a      	ldr	r2, [r1, #8]
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005738:	4293      	cmp	r3, r2
 800573a:	bfb8      	it	lt
 800573c:	4613      	movlt	r3, r2
 800573e:	6033      	str	r3, [r6, #0]
 8005740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005744:	4607      	mov	r7, r0
 8005746:	460c      	mov	r4, r1
 8005748:	b10a      	cbz	r2, 800574e <_printf_common+0x26>
 800574a:	3301      	adds	r3, #1
 800574c:	6033      	str	r3, [r6, #0]
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	0699      	lsls	r1, r3, #26
 8005752:	bf42      	ittt	mi
 8005754:	6833      	ldrmi	r3, [r6, #0]
 8005756:	3302      	addmi	r3, #2
 8005758:	6033      	strmi	r3, [r6, #0]
 800575a:	6825      	ldr	r5, [r4, #0]
 800575c:	f015 0506 	ands.w	r5, r5, #6
 8005760:	d106      	bne.n	8005770 <_printf_common+0x48>
 8005762:	f104 0a19 	add.w	sl, r4, #25
 8005766:	68e3      	ldr	r3, [r4, #12]
 8005768:	6832      	ldr	r2, [r6, #0]
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	42ab      	cmp	r3, r5
 800576e:	dc26      	bgt.n	80057be <_printf_common+0x96>
 8005770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005774:	1e13      	subs	r3, r2, #0
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	bf18      	it	ne
 800577a:	2301      	movne	r3, #1
 800577c:	0692      	lsls	r2, r2, #26
 800577e:	d42b      	bmi.n	80057d8 <_printf_common+0xb0>
 8005780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005784:	4649      	mov	r1, r9
 8005786:	4638      	mov	r0, r7
 8005788:	47c0      	blx	r8
 800578a:	3001      	adds	r0, #1
 800578c:	d01e      	beq.n	80057cc <_printf_common+0xa4>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	6922      	ldr	r2, [r4, #16]
 8005792:	f003 0306 	and.w	r3, r3, #6
 8005796:	2b04      	cmp	r3, #4
 8005798:	bf02      	ittt	eq
 800579a:	68e5      	ldreq	r5, [r4, #12]
 800579c:	6833      	ldreq	r3, [r6, #0]
 800579e:	1aed      	subeq	r5, r5, r3
 80057a0:	68a3      	ldr	r3, [r4, #8]
 80057a2:	bf0c      	ite	eq
 80057a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a8:	2500      	movne	r5, #0
 80057aa:	4293      	cmp	r3, r2
 80057ac:	bfc4      	itt	gt
 80057ae:	1a9b      	subgt	r3, r3, r2
 80057b0:	18ed      	addgt	r5, r5, r3
 80057b2:	2600      	movs	r6, #0
 80057b4:	341a      	adds	r4, #26
 80057b6:	42b5      	cmp	r5, r6
 80057b8:	d11a      	bne.n	80057f0 <_printf_common+0xc8>
 80057ba:	2000      	movs	r0, #0
 80057bc:	e008      	b.n	80057d0 <_printf_common+0xa8>
 80057be:	2301      	movs	r3, #1
 80057c0:	4652      	mov	r2, sl
 80057c2:	4649      	mov	r1, r9
 80057c4:	4638      	mov	r0, r7
 80057c6:	47c0      	blx	r8
 80057c8:	3001      	adds	r0, #1
 80057ca:	d103      	bne.n	80057d4 <_printf_common+0xac>
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d4:	3501      	adds	r5, #1
 80057d6:	e7c6      	b.n	8005766 <_printf_common+0x3e>
 80057d8:	18e1      	adds	r1, r4, r3
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	2030      	movs	r0, #48	; 0x30
 80057de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057e2:	4422      	add	r2, r4
 80057e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057ec:	3302      	adds	r3, #2
 80057ee:	e7c7      	b.n	8005780 <_printf_common+0x58>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4622      	mov	r2, r4
 80057f4:	4649      	mov	r1, r9
 80057f6:	4638      	mov	r0, r7
 80057f8:	47c0      	blx	r8
 80057fa:	3001      	adds	r0, #1
 80057fc:	d0e6      	beq.n	80057cc <_printf_common+0xa4>
 80057fe:	3601      	adds	r6, #1
 8005800:	e7d9      	b.n	80057b6 <_printf_common+0x8e>
	...

08005804 <_printf_i>:
 8005804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	7e0f      	ldrb	r7, [r1, #24]
 800580a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800580c:	2f78      	cmp	r7, #120	; 0x78
 800580e:	4691      	mov	r9, r2
 8005810:	4680      	mov	r8, r0
 8005812:	460c      	mov	r4, r1
 8005814:	469a      	mov	sl, r3
 8005816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800581a:	d807      	bhi.n	800582c <_printf_i+0x28>
 800581c:	2f62      	cmp	r7, #98	; 0x62
 800581e:	d80a      	bhi.n	8005836 <_printf_i+0x32>
 8005820:	2f00      	cmp	r7, #0
 8005822:	f000 80d4 	beq.w	80059ce <_printf_i+0x1ca>
 8005826:	2f58      	cmp	r7, #88	; 0x58
 8005828:	f000 80c0 	beq.w	80059ac <_printf_i+0x1a8>
 800582c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005834:	e03a      	b.n	80058ac <_printf_i+0xa8>
 8005836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800583a:	2b15      	cmp	r3, #21
 800583c:	d8f6      	bhi.n	800582c <_printf_i+0x28>
 800583e:	a101      	add	r1, pc, #4	; (adr r1, 8005844 <_printf_i+0x40>)
 8005840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005844:	0800589d 	.word	0x0800589d
 8005848:	080058b1 	.word	0x080058b1
 800584c:	0800582d 	.word	0x0800582d
 8005850:	0800582d 	.word	0x0800582d
 8005854:	0800582d 	.word	0x0800582d
 8005858:	0800582d 	.word	0x0800582d
 800585c:	080058b1 	.word	0x080058b1
 8005860:	0800582d 	.word	0x0800582d
 8005864:	0800582d 	.word	0x0800582d
 8005868:	0800582d 	.word	0x0800582d
 800586c:	0800582d 	.word	0x0800582d
 8005870:	080059b5 	.word	0x080059b5
 8005874:	080058dd 	.word	0x080058dd
 8005878:	0800596f 	.word	0x0800596f
 800587c:	0800582d 	.word	0x0800582d
 8005880:	0800582d 	.word	0x0800582d
 8005884:	080059d7 	.word	0x080059d7
 8005888:	0800582d 	.word	0x0800582d
 800588c:	080058dd 	.word	0x080058dd
 8005890:	0800582d 	.word	0x0800582d
 8005894:	0800582d 	.word	0x0800582d
 8005898:	08005977 	.word	0x08005977
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	1d1a      	adds	r2, r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	602a      	str	r2, [r5, #0]
 80058a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ac:	2301      	movs	r3, #1
 80058ae:	e09f      	b.n	80059f0 <_printf_i+0x1ec>
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	682b      	ldr	r3, [r5, #0]
 80058b4:	0607      	lsls	r7, r0, #24
 80058b6:	f103 0104 	add.w	r1, r3, #4
 80058ba:	6029      	str	r1, [r5, #0]
 80058bc:	d501      	bpl.n	80058c2 <_printf_i+0xbe>
 80058be:	681e      	ldr	r6, [r3, #0]
 80058c0:	e003      	b.n	80058ca <_printf_i+0xc6>
 80058c2:	0646      	lsls	r6, r0, #25
 80058c4:	d5fb      	bpl.n	80058be <_printf_i+0xba>
 80058c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	da03      	bge.n	80058d6 <_printf_i+0xd2>
 80058ce:	232d      	movs	r3, #45	; 0x2d
 80058d0:	4276      	negs	r6, r6
 80058d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d6:	485a      	ldr	r0, [pc, #360]	; (8005a40 <_printf_i+0x23c>)
 80058d8:	230a      	movs	r3, #10
 80058da:	e012      	b.n	8005902 <_printf_i+0xfe>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	6820      	ldr	r0, [r4, #0]
 80058e0:	1d19      	adds	r1, r3, #4
 80058e2:	6029      	str	r1, [r5, #0]
 80058e4:	0605      	lsls	r5, r0, #24
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0xe8>
 80058e8:	681e      	ldr	r6, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0xee>
 80058ec:	0641      	lsls	r1, r0, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0xe4>
 80058f0:	881e      	ldrh	r6, [r3, #0]
 80058f2:	4853      	ldr	r0, [pc, #332]	; (8005a40 <_printf_i+0x23c>)
 80058f4:	2f6f      	cmp	r7, #111	; 0x6f
 80058f6:	bf0c      	ite	eq
 80058f8:	2308      	moveq	r3, #8
 80058fa:	230a      	movne	r3, #10
 80058fc:	2100      	movs	r1, #0
 80058fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005902:	6865      	ldr	r5, [r4, #4]
 8005904:	60a5      	str	r5, [r4, #8]
 8005906:	2d00      	cmp	r5, #0
 8005908:	bfa2      	ittt	ge
 800590a:	6821      	ldrge	r1, [r4, #0]
 800590c:	f021 0104 	bicge.w	r1, r1, #4
 8005910:	6021      	strge	r1, [r4, #0]
 8005912:	b90e      	cbnz	r6, 8005918 <_printf_i+0x114>
 8005914:	2d00      	cmp	r5, #0
 8005916:	d04b      	beq.n	80059b0 <_printf_i+0x1ac>
 8005918:	4615      	mov	r5, r2
 800591a:	fbb6 f1f3 	udiv	r1, r6, r3
 800591e:	fb03 6711 	mls	r7, r3, r1, r6
 8005922:	5dc7      	ldrb	r7, [r0, r7]
 8005924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005928:	4637      	mov	r7, r6
 800592a:	42bb      	cmp	r3, r7
 800592c:	460e      	mov	r6, r1
 800592e:	d9f4      	bls.n	800591a <_printf_i+0x116>
 8005930:	2b08      	cmp	r3, #8
 8005932:	d10b      	bne.n	800594c <_printf_i+0x148>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	07de      	lsls	r6, r3, #31
 8005938:	d508      	bpl.n	800594c <_printf_i+0x148>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	6861      	ldr	r1, [r4, #4]
 800593e:	4299      	cmp	r1, r3
 8005940:	bfde      	ittt	le
 8005942:	2330      	movle	r3, #48	; 0x30
 8005944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005948:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800594c:	1b52      	subs	r2, r2, r5
 800594e:	6122      	str	r2, [r4, #16]
 8005950:	f8cd a000 	str.w	sl, [sp]
 8005954:	464b      	mov	r3, r9
 8005956:	aa03      	add	r2, sp, #12
 8005958:	4621      	mov	r1, r4
 800595a:	4640      	mov	r0, r8
 800595c:	f7ff fee4 	bl	8005728 <_printf_common>
 8005960:	3001      	adds	r0, #1
 8005962:	d14a      	bne.n	80059fa <_printf_i+0x1f6>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005968:	b004      	add	sp, #16
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	4833      	ldr	r0, [pc, #204]	; (8005a44 <_printf_i+0x240>)
 8005978:	2778      	movs	r7, #120	; 0x78
 800597a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	6829      	ldr	r1, [r5, #0]
 8005982:	061f      	lsls	r7, r3, #24
 8005984:	f851 6b04 	ldr.w	r6, [r1], #4
 8005988:	d402      	bmi.n	8005990 <_printf_i+0x18c>
 800598a:	065f      	lsls	r7, r3, #25
 800598c:	bf48      	it	mi
 800598e:	b2b6      	uxthmi	r6, r6
 8005990:	07df      	lsls	r7, r3, #31
 8005992:	bf48      	it	mi
 8005994:	f043 0320 	orrmi.w	r3, r3, #32
 8005998:	6029      	str	r1, [r5, #0]
 800599a:	bf48      	it	mi
 800599c:	6023      	strmi	r3, [r4, #0]
 800599e:	b91e      	cbnz	r6, 80059a8 <_printf_i+0x1a4>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	f023 0320 	bic.w	r3, r3, #32
 80059a6:	6023      	str	r3, [r4, #0]
 80059a8:	2310      	movs	r3, #16
 80059aa:	e7a7      	b.n	80058fc <_printf_i+0xf8>
 80059ac:	4824      	ldr	r0, [pc, #144]	; (8005a40 <_printf_i+0x23c>)
 80059ae:	e7e4      	b.n	800597a <_printf_i+0x176>
 80059b0:	4615      	mov	r5, r2
 80059b2:	e7bd      	b.n	8005930 <_printf_i+0x12c>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	6826      	ldr	r6, [r4, #0]
 80059b8:	6961      	ldr	r1, [r4, #20]
 80059ba:	1d18      	adds	r0, r3, #4
 80059bc:	6028      	str	r0, [r5, #0]
 80059be:	0635      	lsls	r5, r6, #24
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	d501      	bpl.n	80059c8 <_printf_i+0x1c4>
 80059c4:	6019      	str	r1, [r3, #0]
 80059c6:	e002      	b.n	80059ce <_printf_i+0x1ca>
 80059c8:	0670      	lsls	r0, r6, #25
 80059ca:	d5fb      	bpl.n	80059c4 <_printf_i+0x1c0>
 80059cc:	8019      	strh	r1, [r3, #0]
 80059ce:	2300      	movs	r3, #0
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	4615      	mov	r5, r2
 80059d4:	e7bc      	b.n	8005950 <_printf_i+0x14c>
 80059d6:	682b      	ldr	r3, [r5, #0]
 80059d8:	1d1a      	adds	r2, r3, #4
 80059da:	602a      	str	r2, [r5, #0]
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	6862      	ldr	r2, [r4, #4]
 80059e0:	2100      	movs	r1, #0
 80059e2:	4628      	mov	r0, r5
 80059e4:	f7fa fbf4 	bl	80001d0 <memchr>
 80059e8:	b108      	cbz	r0, 80059ee <_printf_i+0x1ea>
 80059ea:	1b40      	subs	r0, r0, r5
 80059ec:	6060      	str	r0, [r4, #4]
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	2300      	movs	r3, #0
 80059f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f8:	e7aa      	b.n	8005950 <_printf_i+0x14c>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	462a      	mov	r2, r5
 80059fe:	4649      	mov	r1, r9
 8005a00:	4640      	mov	r0, r8
 8005a02:	47d0      	blx	sl
 8005a04:	3001      	adds	r0, #1
 8005a06:	d0ad      	beq.n	8005964 <_printf_i+0x160>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	079b      	lsls	r3, r3, #30
 8005a0c:	d413      	bmi.n	8005a36 <_printf_i+0x232>
 8005a0e:	68e0      	ldr	r0, [r4, #12]
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	4298      	cmp	r0, r3
 8005a14:	bfb8      	it	lt
 8005a16:	4618      	movlt	r0, r3
 8005a18:	e7a6      	b.n	8005968 <_printf_i+0x164>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	47d0      	blx	sl
 8005a24:	3001      	adds	r0, #1
 8005a26:	d09d      	beq.n	8005964 <_printf_i+0x160>
 8005a28:	3501      	adds	r5, #1
 8005a2a:	68e3      	ldr	r3, [r4, #12]
 8005a2c:	9903      	ldr	r1, [sp, #12]
 8005a2e:	1a5b      	subs	r3, r3, r1
 8005a30:	42ab      	cmp	r3, r5
 8005a32:	dcf2      	bgt.n	8005a1a <_printf_i+0x216>
 8005a34:	e7eb      	b.n	8005a0e <_printf_i+0x20a>
 8005a36:	2500      	movs	r5, #0
 8005a38:	f104 0619 	add.w	r6, r4, #25
 8005a3c:	e7f5      	b.n	8005a2a <_printf_i+0x226>
 8005a3e:	bf00      	nop
 8005a40:	08005e55 	.word	0x08005e55
 8005a44:	08005e66 	.word	0x08005e66

08005a48 <__sflush_r>:
 8005a48:	898a      	ldrh	r2, [r1, #12]
 8005a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	4605      	mov	r5, r0
 8005a50:	0710      	lsls	r0, r2, #28
 8005a52:	460c      	mov	r4, r1
 8005a54:	d458      	bmi.n	8005b08 <__sflush_r+0xc0>
 8005a56:	684b      	ldr	r3, [r1, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dc05      	bgt.n	8005a68 <__sflush_r+0x20>
 8005a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dc02      	bgt.n	8005a68 <__sflush_r+0x20>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a6a:	2e00      	cmp	r6, #0
 8005a6c:	d0f9      	beq.n	8005a62 <__sflush_r+0x1a>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a74:	682f      	ldr	r7, [r5, #0]
 8005a76:	6a21      	ldr	r1, [r4, #32]
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	d032      	beq.n	8005ae2 <__sflush_r+0x9a>
 8005a7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	075a      	lsls	r2, r3, #29
 8005a82:	d505      	bpl.n	8005a90 <__sflush_r+0x48>
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	1ac0      	subs	r0, r0, r3
 8005a88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a8a:	b10b      	cbz	r3, 8005a90 <__sflush_r+0x48>
 8005a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a8e:	1ac0      	subs	r0, r0, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	4602      	mov	r2, r0
 8005a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a96:	6a21      	ldr	r1, [r4, #32]
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b0      	blx	r6
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	d106      	bne.n	8005ab0 <__sflush_r+0x68>
 8005aa2:	6829      	ldr	r1, [r5, #0]
 8005aa4:	291d      	cmp	r1, #29
 8005aa6:	d82b      	bhi.n	8005b00 <__sflush_r+0xb8>
 8005aa8:	4a29      	ldr	r2, [pc, #164]	; (8005b50 <__sflush_r+0x108>)
 8005aaa:	410a      	asrs	r2, r1
 8005aac:	07d6      	lsls	r6, r2, #31
 8005aae:	d427      	bmi.n	8005b00 <__sflush_r+0xb8>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	6062      	str	r2, [r4, #4]
 8005ab4:	04d9      	lsls	r1, r3, #19
 8005ab6:	6922      	ldr	r2, [r4, #16]
 8005ab8:	6022      	str	r2, [r4, #0]
 8005aba:	d504      	bpl.n	8005ac6 <__sflush_r+0x7e>
 8005abc:	1c42      	adds	r2, r0, #1
 8005abe:	d101      	bne.n	8005ac4 <__sflush_r+0x7c>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b903      	cbnz	r3, 8005ac6 <__sflush_r+0x7e>
 8005ac4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ac8:	602f      	str	r7, [r5, #0]
 8005aca:	2900      	cmp	r1, #0
 8005acc:	d0c9      	beq.n	8005a62 <__sflush_r+0x1a>
 8005ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ad2:	4299      	cmp	r1, r3
 8005ad4:	d002      	beq.n	8005adc <__sflush_r+0x94>
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f7ff fbea 	bl	80052b0 <_free_r>
 8005adc:	2000      	movs	r0, #0
 8005ade:	6360      	str	r0, [r4, #52]	; 0x34
 8005ae0:	e7c0      	b.n	8005a64 <__sflush_r+0x1c>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b0      	blx	r6
 8005ae8:	1c41      	adds	r1, r0, #1
 8005aea:	d1c8      	bne.n	8005a7e <__sflush_r+0x36>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0c5      	beq.n	8005a7e <__sflush_r+0x36>
 8005af2:	2b1d      	cmp	r3, #29
 8005af4:	d001      	beq.n	8005afa <__sflush_r+0xb2>
 8005af6:	2b16      	cmp	r3, #22
 8005af8:	d101      	bne.n	8005afe <__sflush_r+0xb6>
 8005afa:	602f      	str	r7, [r5, #0]
 8005afc:	e7b1      	b.n	8005a62 <__sflush_r+0x1a>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b04:	81a3      	strh	r3, [r4, #12]
 8005b06:	e7ad      	b.n	8005a64 <__sflush_r+0x1c>
 8005b08:	690f      	ldr	r7, [r1, #16]
 8005b0a:	2f00      	cmp	r7, #0
 8005b0c:	d0a9      	beq.n	8005a62 <__sflush_r+0x1a>
 8005b0e:	0793      	lsls	r3, r2, #30
 8005b10:	680e      	ldr	r6, [r1, #0]
 8005b12:	bf08      	it	eq
 8005b14:	694b      	ldreq	r3, [r1, #20]
 8005b16:	600f      	str	r7, [r1, #0]
 8005b18:	bf18      	it	ne
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	eba6 0807 	sub.w	r8, r6, r7
 8005b20:	608b      	str	r3, [r1, #8]
 8005b22:	f1b8 0f00 	cmp.w	r8, #0
 8005b26:	dd9c      	ble.n	8005a62 <__sflush_r+0x1a>
 8005b28:	6a21      	ldr	r1, [r4, #32]
 8005b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b2c:	4643      	mov	r3, r8
 8005b2e:	463a      	mov	r2, r7
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b0      	blx	r6
 8005b34:	2800      	cmp	r0, #0
 8005b36:	dc06      	bgt.n	8005b46 <__sflush_r+0xfe>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b44:	e78e      	b.n	8005a64 <__sflush_r+0x1c>
 8005b46:	4407      	add	r7, r0
 8005b48:	eba8 0800 	sub.w	r8, r8, r0
 8005b4c:	e7e9      	b.n	8005b22 <__sflush_r+0xda>
 8005b4e:	bf00      	nop
 8005b50:	dfbffffe 	.word	0xdfbffffe

08005b54 <_fflush_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	690b      	ldr	r3, [r1, #16]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	b913      	cbnz	r3, 8005b64 <_fflush_r+0x10>
 8005b5e:	2500      	movs	r5, #0
 8005b60:	4628      	mov	r0, r5
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	b118      	cbz	r0, 8005b6e <_fflush_r+0x1a>
 8005b66:	6a03      	ldr	r3, [r0, #32]
 8005b68:	b90b      	cbnz	r3, 8005b6e <_fflush_r+0x1a>
 8005b6a:	f7ff fa99 	bl	80050a0 <__sinit>
 8005b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f3      	beq.n	8005b5e <_fflush_r+0xa>
 8005b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b78:	07d0      	lsls	r0, r2, #31
 8005b7a:	d404      	bmi.n	8005b86 <_fflush_r+0x32>
 8005b7c:	0599      	lsls	r1, r3, #22
 8005b7e:	d402      	bmi.n	8005b86 <_fflush_r+0x32>
 8005b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b82:	f7ff fb92 	bl	80052aa <__retarget_lock_acquire_recursive>
 8005b86:	4628      	mov	r0, r5
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f7ff ff5d 	bl	8005a48 <__sflush_r>
 8005b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b90:	07da      	lsls	r2, r3, #31
 8005b92:	4605      	mov	r5, r0
 8005b94:	d4e4      	bmi.n	8005b60 <_fflush_r+0xc>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	059b      	lsls	r3, r3, #22
 8005b9a:	d4e1      	bmi.n	8005b60 <_fflush_r+0xc>
 8005b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b9e:	f7ff fb85 	bl	80052ac <__retarget_lock_release_recursive>
 8005ba2:	e7dd      	b.n	8005b60 <_fflush_r+0xc>

08005ba4 <__swbuf_r>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	460e      	mov	r6, r1
 8005ba8:	4614      	mov	r4, r2
 8005baa:	4605      	mov	r5, r0
 8005bac:	b118      	cbz	r0, 8005bb6 <__swbuf_r+0x12>
 8005bae:	6a03      	ldr	r3, [r0, #32]
 8005bb0:	b90b      	cbnz	r3, 8005bb6 <__swbuf_r+0x12>
 8005bb2:	f7ff fa75 	bl	80050a0 <__sinit>
 8005bb6:	69a3      	ldr	r3, [r4, #24]
 8005bb8:	60a3      	str	r3, [r4, #8]
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	071a      	lsls	r2, r3, #28
 8005bbe:	d525      	bpl.n	8005c0c <__swbuf_r+0x68>
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	b31b      	cbz	r3, 8005c0c <__swbuf_r+0x68>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	6922      	ldr	r2, [r4, #16]
 8005bc8:	1a98      	subs	r0, r3, r2
 8005bca:	6963      	ldr	r3, [r4, #20]
 8005bcc:	b2f6      	uxtb	r6, r6
 8005bce:	4283      	cmp	r3, r0
 8005bd0:	4637      	mov	r7, r6
 8005bd2:	dc04      	bgt.n	8005bde <__swbuf_r+0x3a>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7ff ffbc 	bl	8005b54 <_fflush_r>
 8005bdc:	b9e0      	cbnz	r0, 8005c18 <__swbuf_r+0x74>
 8005bde:	68a3      	ldr	r3, [r4, #8]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	60a3      	str	r3, [r4, #8]
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	6022      	str	r2, [r4, #0]
 8005bea:	701e      	strb	r6, [r3, #0]
 8005bec:	6962      	ldr	r2, [r4, #20]
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d004      	beq.n	8005bfe <__swbuf_r+0x5a>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	07db      	lsls	r3, r3, #31
 8005bf8:	d506      	bpl.n	8005c08 <__swbuf_r+0x64>
 8005bfa:	2e0a      	cmp	r6, #10
 8005bfc:	d104      	bne.n	8005c08 <__swbuf_r+0x64>
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f7ff ffa7 	bl	8005b54 <_fflush_r>
 8005c06:	b938      	cbnz	r0, 8005c18 <__swbuf_r+0x74>
 8005c08:	4638      	mov	r0, r7
 8005c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f806 	bl	8005c20 <__swsetup_r>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d0d5      	beq.n	8005bc4 <__swbuf_r+0x20>
 8005c18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c1c:	e7f4      	b.n	8005c08 <__swbuf_r+0x64>
	...

08005c20 <__swsetup_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <__swsetup_r+0xac>)
 8005c24:	4605      	mov	r5, r0
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	460c      	mov	r4, r1
 8005c2a:	b118      	cbz	r0, 8005c34 <__swsetup_r+0x14>
 8005c2c:	6a03      	ldr	r3, [r0, #32]
 8005c2e:	b90b      	cbnz	r3, 8005c34 <__swsetup_r+0x14>
 8005c30:	f7ff fa36 	bl	80050a0 <__sinit>
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c3a:	0718      	lsls	r0, r3, #28
 8005c3c:	d422      	bmi.n	8005c84 <__swsetup_r+0x64>
 8005c3e:	06d9      	lsls	r1, r3, #27
 8005c40:	d407      	bmi.n	8005c52 <__swsetup_r+0x32>
 8005c42:	2309      	movs	r3, #9
 8005c44:	602b      	str	r3, [r5, #0]
 8005c46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c4a:	81a3      	strh	r3, [r4, #12]
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c50:	e034      	b.n	8005cbc <__swsetup_r+0x9c>
 8005c52:	0758      	lsls	r0, r3, #29
 8005c54:	d512      	bpl.n	8005c7c <__swsetup_r+0x5c>
 8005c56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c58:	b141      	cbz	r1, 8005c6c <__swsetup_r+0x4c>
 8005c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	d002      	beq.n	8005c68 <__swsetup_r+0x48>
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7ff fb24 	bl	80052b0 <_free_r>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	2300      	movs	r3, #0
 8005c76:	6063      	str	r3, [r4, #4]
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	6023      	str	r3, [r4, #0]
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f043 0308 	orr.w	r3, r3, #8
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	b94b      	cbnz	r3, 8005c9c <__swsetup_r+0x7c>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c92:	d003      	beq.n	8005c9c <__swsetup_r+0x7c>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 f850 	bl	8005d3c <__smakebuf_r>
 8005c9c:	89a0      	ldrh	r0, [r4, #12]
 8005c9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ca2:	f010 0301 	ands.w	r3, r0, #1
 8005ca6:	d00a      	beq.n	8005cbe <__swsetup_r+0x9e>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60a3      	str	r3, [r4, #8]
 8005cac:	6963      	ldr	r3, [r4, #20]
 8005cae:	425b      	negs	r3, r3
 8005cb0:	61a3      	str	r3, [r4, #24]
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	b943      	cbnz	r3, 8005cc8 <__swsetup_r+0xa8>
 8005cb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cba:	d1c4      	bne.n	8005c46 <__swsetup_r+0x26>
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
 8005cbe:	0781      	lsls	r1, r0, #30
 8005cc0:	bf58      	it	pl
 8005cc2:	6963      	ldrpl	r3, [r4, #20]
 8005cc4:	60a3      	str	r3, [r4, #8]
 8005cc6:	e7f4      	b.n	8005cb2 <__swsetup_r+0x92>
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e7f7      	b.n	8005cbc <__swsetup_r+0x9c>
 8005ccc:	20000064 	.word	0x20000064

08005cd0 <_sbrk_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d06      	ldr	r5, [pc, #24]	; (8005cec <_sbrk_r+0x1c>)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	4608      	mov	r0, r1
 8005cda:	602b      	str	r3, [r5, #0]
 8005cdc:	f7fb fd96 	bl	800180c <_sbrk>
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	d102      	bne.n	8005cea <_sbrk_r+0x1a>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	b103      	cbz	r3, 8005cea <_sbrk_r+0x1a>
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	200002f4 	.word	0x200002f4

08005cf0 <__swhatbuf_r>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	b096      	sub	sp, #88	; 0x58
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	461e      	mov	r6, r3
 8005d00:	da0d      	bge.n	8005d1e <__swhatbuf_r+0x2e>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d08:	f04f 0100 	mov.w	r1, #0
 8005d0c:	bf0c      	ite	eq
 8005d0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d12:	2340      	movne	r3, #64	; 0x40
 8005d14:	2000      	movs	r0, #0
 8005d16:	6031      	str	r1, [r6, #0]
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	b016      	add	sp, #88	; 0x58
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	466a      	mov	r2, sp
 8005d20:	f000 f848 	bl	8005db4 <_fstat_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	dbec      	blt.n	8005d02 <__swhatbuf_r+0x12>
 8005d28:	9901      	ldr	r1, [sp, #4]
 8005d2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d32:	4259      	negs	r1, r3
 8005d34:	4159      	adcs	r1, r3
 8005d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d3a:	e7eb      	b.n	8005d14 <__swhatbuf_r+0x24>

08005d3c <__smakebuf_r>:
 8005d3c:	898b      	ldrh	r3, [r1, #12]
 8005d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d40:	079d      	lsls	r5, r3, #30
 8005d42:	4606      	mov	r6, r0
 8005d44:	460c      	mov	r4, r1
 8005d46:	d507      	bpl.n	8005d58 <__smakebuf_r+0x1c>
 8005d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	2301      	movs	r3, #1
 8005d52:	6163      	str	r3, [r4, #20]
 8005d54:	b002      	add	sp, #8
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	ab01      	add	r3, sp, #4
 8005d5a:	466a      	mov	r2, sp
 8005d5c:	f7ff ffc8 	bl	8005cf0 <__swhatbuf_r>
 8005d60:	9900      	ldr	r1, [sp, #0]
 8005d62:	4605      	mov	r5, r0
 8005d64:	4630      	mov	r0, r6
 8005d66:	f7ff fb0f 	bl	8005388 <_malloc_r>
 8005d6a:	b948      	cbnz	r0, 8005d80 <__smakebuf_r+0x44>
 8005d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d70:	059a      	lsls	r2, r3, #22
 8005d72:	d4ef      	bmi.n	8005d54 <__smakebuf_r+0x18>
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	f043 0302 	orr.w	r3, r3, #2
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	e7e3      	b.n	8005d48 <__smakebuf_r+0xc>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	6020      	str	r0, [r4, #0]
 8005d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	9b00      	ldr	r3, [sp, #0]
 8005d8c:	6163      	str	r3, [r4, #20]
 8005d8e:	9b01      	ldr	r3, [sp, #4]
 8005d90:	6120      	str	r0, [r4, #16]
 8005d92:	b15b      	cbz	r3, 8005dac <__smakebuf_r+0x70>
 8005d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f000 f81d 	bl	8005dd8 <_isatty_r>
 8005d9e:	b128      	cbz	r0, 8005dac <__smakebuf_r+0x70>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	431d      	orrs	r5, r3
 8005db0:	81a5      	strh	r5, [r4, #12]
 8005db2:	e7cf      	b.n	8005d54 <__smakebuf_r+0x18>

08005db4 <_fstat_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d07      	ldr	r5, [pc, #28]	; (8005dd4 <_fstat_r+0x20>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	f7fb fcfa 	bl	80017ba <_fstat>
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	d102      	bne.n	8005dd0 <_fstat_r+0x1c>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	b103      	cbz	r3, 8005dd0 <_fstat_r+0x1c>
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200002f4 	.word	0x200002f4

08005dd8 <_isatty_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d06      	ldr	r5, [pc, #24]	; (8005df4 <_isatty_r+0x1c>)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fb fcf9 	bl	80017da <_isatty>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_isatty_r+0x1a>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_isatty_r+0x1a>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	200002f4 	.word	0x200002f4

08005df8 <_init>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr

08005e04 <_fini>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr
